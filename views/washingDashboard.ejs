<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Washing Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap 5 CSS & FontAwesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer">
  <style>
    body { background-color: #f8f9fa; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
    .navbar-brand { font-weight: 700; font-size: 1.4rem; }
    .nav-tabs .nav-link { font-size: 1.1rem; font-weight: 500; }
    .autocomplete-items {
      position: absolute;
      z-index: 1000;
      width: 100%;
      max-height: 200px;
      overflow-y: auto;
      background: #fff;
      border: 1px solid #ced4da;
      display: none;
    }
    .autocomplete-items li { padding: 0.5rem; cursor: pointer; }
    .autocomplete-items li:hover { background: #e9ecef; }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="#">Washing Dashboard</a>
      <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
        <div class="d-flex gap-2">
          <a href="/washingdashboard/approve" class="btn btn-outline-info btn-sm">
            <i class="fas fa-check-circle"></i> Approvals
          </a>
          <a href="/washingdashboard/assign-finishing" class="btn btn-outline-primary btn-sm">
            <i class="fas fa-tasks"></i> Assign to Finishing
          </a>
          <a href="/logout" class="btn btn-outline-danger btn-sm">
            <i class="fas fa-sign-out-alt"></i> Logout
          </a>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Container -->
  <div class="container my-4">
    <!-- Flash Messages -->
    <% if (error && error.length) { %>
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <%= error[0] %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% } %>
    <% if (success && success.length) { %>
      <div class="alert alert-success alert-dismissible fade show" role="alert">
        <%= success[0] %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% } %>

    <h2 class="mb-4">Washing Dashboard</h2>

    <!-- Tabs for Create & Existing Entries -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="create-tab" data-bs-toggle="tab" data-bs-target="#createTab" type="button" role="tab" aria-selected="true">
          <i class="fas fa-plus-circle me-1"></i> Create Entry
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="existing-tab" data-bs-toggle="tab" data-bs-target="#existingTab" type="button" role="tab" aria-selected="false">
          <i class="fas fa-list me-1"></i> Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3">
      <!-- CREATE ENTRY TAB -->
      <div class="tab-pane fade show active" id="createTab" role="tabpanel">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">
            Create New Washing Entry
          </div>
          <div class="card-body">
            <form id="createForm" action="/washingdashboard/create" method="POST" enctype="multipart/form-data">
              <div class="mb-3 position-relative">
                <label for="selectedLotIdSearch" class="form-label">Select Lot</label>
                <input type="text" id="selectedLotIdSearch" class="form-control" placeholder="Search assigned lot..." required>
                <input type="hidden" name="selectedLotId" id="selectedLotId" required>
                <ul class="list-group autocomplete-items" id="lotAutocomplete"></ul>
              </div>
              <div class="mb-3">
                <label class="form-label">Remark (optional)</label>
                <input type="text" name="remark" class="form-control" placeholder="Enter remark...">
              </div>
              <div class="mb-3">
                <label class="form-label">Image (optional)</label>
                <input type="file" name="image_file" class="form-control" accept="image/*">
              </div>
              <div id="lotSizesContainer" style="display:none;">
                <h5 class="mt-4">Sizes for This Lot</h5>
                <table class="table table-bordered" id="sizesTable">
                  <thead class="table-light">
                    <tr>
                      <th>Size Label</th>
                      <th>Max Available</th>
                      <th>Enter Pieces</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
                <div class="mt-2">
                  <strong>Total Pieces Selected: </strong><span id="createTotalPieces">0</span>
                </div>
              </div>
              <button type="submit" class="btn btn-success mt-3">
                <i class="fas fa-check me-1"></i> Create Washing Entry
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div class="tab-pane fade" id="existingTab" role="tabpanel">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4>Existing Washing Entries</h4>
          <a href="/washingdashboard/download-all" class="btn btn-success">
            <i class="fas fa-file-excel me-1"></i> Download Excel
          </a>
        </div>
        <div class="input-group mb-3">
          <span class="input-group-text"><i class="fas fa-search"></i></span>
          <input type="text" id="searchExisting" class="form-control" placeholder="Search by lot or SKU...">
        </div>
        <div id="existingEntriesContainer" class="accordion"></div>
        <div id="loadMoreSentinel" style="height: 60px;"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST">
          <div class="modal-header">
            <h5 class="modal-title" id="updateModalLabel">Update Washing Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p><strong>Updating Entry ID:</strong> <span id="updatingEntryId"></span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead class="table-light">
                <tr>
                  <th>Size Label</th>
                  <th>Already Used</th>
                  <th>Max Remain</th>
                  <th>New Pieces (Increment)</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <p class="small text-muted">Leave blank for 0 increment.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Save Updates</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Bootstrap Bundle JS and Custom Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // ---------- Autocomplete for Lot Selection ----------
    const lotsData = <%- JSON.stringify(lots) %> || [];
    const selectedLotIdSearch = document.getElementById('selectedLotIdSearch');
    const selectedLotId = document.getElementById('selectedLotId');
    const lotAutocomplete = document.getElementById('lotAutocomplete');

    selectedLotIdSearch.addEventListener('input', () => {
      lotAutocomplete.innerHTML = '';
      const term = selectedLotIdSearch.value.toLowerCase();
      if (!term) {
        lotAutocomplete.style.display = 'none';
        return;
      }
      const filtered = lotsData.filter(l => (`${l.lot_no} ${l.sku}`).toLowerCase().includes(term));
      if (!filtered.length) {
        lotAutocomplete.style.display = 'none';
        return;
      }
      filtered.forEach(item => {
        const li = document.createElement('li');
        li.classList.add('list-group-item');
        li.textContent = `Lot ${item.lot_no} (SKU: ${item.sku})`;
        li.dataset.value = item.id;
        lotAutocomplete.appendChild(li);
      });
      lotAutocomplete.style.display = 'block';
    });
    lotAutocomplete.addEventListener('click', (e) => {
      if (e.target && e.target.matches('li.list-group-item')) {
        selectedLotIdSearch.value = e.target.textContent;
        selectedLotId.value = e.target.dataset.value;
        lotAutocomplete.style.display = 'none';
        fetchLotSizes(e.target.dataset.value);
      }
    });
    document.addEventListener('click', (e) => {
      if (!lotAutocomplete.contains(e.target) && !selectedLotIdSearch.contains(e.target)) {
        lotAutocomplete.style.display = 'none';
      }
    });

    // ---------- Fetch Lot Sizes ----------
    const lotSizesContainer = document.getElementById('lotSizesContainer');
    const sizesTableBody = document.querySelector('#sizesTable tbody');
    const createTotalPieces = document.getElementById('createTotalPieces');

    async function fetchLotSizes(lotId) {
      try {
        const res = await fetch(`/washingdashboard/get-lot-sizes/${lotId}`);
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const data = await res.json();
        renderSizes(data);
      } catch (err) {
        console.error('Error fetching lot sizes:', err);
        lotSizesContainer.style.display = 'none';
        sizesTableBody.innerHTML = '';
      }
    }

    function renderSizes(sizesArr) {
      sizesTableBody.innerHTML = '';
      lotSizesContainer.style.display = 'block';
      sizesArr.forEach(sz => {
        const tr = document.createElement('tr');
        const tdLabel = document.createElement('td');
        tdLabel.textContent = sz.size_label;
        tr.appendChild(tdLabel);
        const tdRemain = document.createElement('td');
        tdRemain.textContent = sz.remain;
        tr.appendChild(tdRemain);
        const tdInput = document.createElement('td');
        const inp = document.createElement('input');
        inp.type = 'number';
        inp.min = 0;
        inp.max = sz.remain;
        inp.value = 0;
        inp.classList.add('form-control');
        inp.dataset.sizeId = sz.id;
        inp.addEventListener('input', updateTotal);
        tdInput.appendChild(inp);
        tr.appendChild(tdInput);
        sizesTableBody.appendChild(tr);
      });
      createTotalPieces.textContent = '0';
    }

    function updateTotal() {
      let sum = 0;
      const inputs = sizesTableBody.querySelectorAll('input');
      inputs.forEach(inp => {
        const val = parseInt(inp.value, 10);
        if (!isNaN(val) && val > 0) sum += val;
      });
      createTotalPieces.textContent = sum;
    }

    // ---------- Create Form Submission ----------
    const createForm = document.getElementById('createForm');
    createForm.addEventListener('submit', (e) => {
      const rows = sizesTableBody.querySelectorAll('tr');
      if (!rows.length) {
        alert('No sizes loaded. Please select a lot.');
        e.preventDefault();
        return;
      }
      rows.forEach(row => {
        const remain = parseInt(row.children[1].textContent, 10);
        const input = row.children[2].querySelector('input');
        let val = parseInt(input.value, 10);
        if (isNaN(val) || val < 0) val = 0;
        if (val > remain) {
          alert(`For size ${row.children[0].textContent}, you requested ${val} but only ${remain} remain!`);
          e.preventDefault();
          return;
        }
      });
      document.querySelectorAll('.sizeMappingField').forEach(f => f.remove());
      rows.forEach(row => {
        const input = row.children[2].querySelector('input');
        let val = parseInt(input.value, 10);
        if (isNaN(val) || val < 0) val = 0;
        if (val > 0) {
          const hidden = document.createElement('input');
          hidden.type = 'hidden';
          hidden.classList.add('sizeMappingField');
          hidden.name = `sizes[${input.dataset.sizeId}]`;
          hidden.value = val;
          createForm.appendChild(hidden);
        }
      });
    });

    // ---------- Lazy Load Existing Entries ----------
    let offset = 0, loading = false, hasMore = true;
    const existingContainer = document.getElementById('existingEntriesContainer');
    const sentinel = document.getElementById('loadMoreSentinel');
    const searchExisting = document.getElementById('searchExisting');
    async function loadMoreData() {
      if (loading || !hasMore) return;
      loading = true;
      const term = searchExisting.value.trim();
      try {
        const res = await fetch(`/washingdashboard/list-entries?offset=${offset}&search=${encodeURIComponent(term)}`);
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const data = await res.json();
        const list = data.data || [];
        hasMore = data.hasMore;
        list.forEach(item => {
          const card = document.createElement('div');
          card.classList.add('accordion-item');
          const headerId = `heading-${item.id}`;
          const collapseId = `collapse-${item.id}`;
          card.innerHTML = `
            <h2 class="accordion-header" id="${headerId}">
              <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${collapseId}" aria-expanded="false" aria-controls="${collapseId}">
                Lot ${item.lot_no} (SKU: ${item.sku}) - Total: ${item.total_pieces}
              </button>
            </h2>
            <div id="${collapseId}" class="accordion-collapse collapse" aria-labelledby="${headerId}" data-bs-parent="#existingEntriesContainer">
              <div class="accordion-body">
                <div class="d-flex justify-content-end mb-3">
                  <a href="/washingdashboard/challan/${item.id}" target="_blank" class="btn btn-sm btn-info me-2">
                    <i class="fas fa-file-alt"></i> Challan
                  </a>
                  <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#updateModal" data-entry-id="${item.id}">
                    Update
                  </button>
                </div>
                <p><strong>ID:</strong> ${item.id}</p>
                <p><strong>Remark:</strong> ${item.remark || 'N/A'}</p>
                ${ item.image_url ? `<p><img src="${item.image_url}" style="max-width:200px;" /></p>` : '' }
                <table class="table table-sm">
                  <thead>
                    <tr><th>Size Label</th><th>Pieces</th></tr>
                  </thead>
                  <tbody>
                    ${
                      item.sizes && item.sizes.length
                        ? item.sizes.map(sz => `<tr><td>${sz.size_label}</td><td>${sz.pieces}</td></tr>`).join('')
                        : '<tr><td colspan="2">No sizes found</td></tr>'
                    }
                  </tbody>
                </table>
              </div>
            </div>
          `;
          existingContainer.appendChild(card);
        });
        offset += list.length;
      } catch (err) {
        console.error('Error loading existing entries:', err);
      } finally {
        loading = false;
      }
    }
    const observer = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) loadMoreData();
    }, { threshold: 0.1 });
    observer.observe(sentinel);
    searchExisting.addEventListener('input', () => {
      offset = 0;
      hasMore = true;
      existingContainer.innerHTML = '';
      loadMoreData();
    });
    loadMoreData();

    // ---------- Update Modal Logic ----------
    const updateModal = document.getElementById('updateModal');
    const updateForm = document.getElementById('updateForm');
    const updateSizesTable = document.getElementById('updateSizesTable');
    const updatingEntryId = document.getElementById('updatingEntryId');
    if (updateModal) {
      updateModal.addEventListener('show.bs.modal', async (event) => {
        const button = event.relatedTarget;
        const entryId = button.getAttribute('data-entry-id');
        updatingEntryId.textContent = entryId;
        updateForm.action = '/washingdashboard/update/' + entryId;
        updateSizesTable.querySelector('tbody').innerHTML = '';
        try {
          const res = await fetch(`/washingdashboard/update/${entryId}/json`);
          if (!res.ok) throw new Error('HTTP ' + res.status);
          const data = await res.json();
          if (!data.sizes) return;
          data.sizes.forEach(sz => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${sz.size_label}</td>
              <td>${sz.pieces}</td>
              <td>${sz.remain != null ? sz.remain : 999999}</td>
              <td>
                <input type="number" class="form-control" min="0" placeholder="0" data-size-label="${sz.size_label}">
              </td>
            `;
            updateSizesTable.querySelector('tbody').appendChild(tr);
          });
        } catch (err) {
          console.error('Error fetching update sizes:', err);
        }
      });
      updateForm.addEventListener('submit', (e) => {
        document.querySelectorAll('.updateSizeMappingField').forEach(el => el.remove());
        const rows = updateSizesTable.querySelectorAll('tbody tr');
        for (const row of rows) {
          const label = row.children[0].textContent;
          const remain = parseInt(row.children[2].textContent, 10);
          const input = row.children[3].querySelector('input');
          let val = parseInt(input.value.trim() || '0', 10);
          if (isNaN(val) || val < 0) val = 0;
          if (val > remain) {
            alert(`Cannot add ${val} to size [${label}], only ${remain} remain`);
            e.preventDefault();
            return;
          }
          if (val > 0) {
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.classList.add('updateSizeMappingField');
            hidden.name = `updateSizes[${label}]`;
            hidden.value = val;
            updateForm.appendChild(hidden);
          }
        }
      });
    }
  </script>
</body>
</html>
