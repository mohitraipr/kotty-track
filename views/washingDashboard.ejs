<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Washing Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <!-- Bootstrap & FontAwesome -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Washing Dashboard</a>
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarNav"
        aria-controls="navbarNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a href="/logout" class="btn btn-sm btn-danger">Logout</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container my-4">
    <!-- Flash messages -->
    <% if (error && error.length) { %>
      <div class="alert alert-danger"><%= error[0] %></div>
    <% } %>
    <% if (success && success.length) { %>
      <div class="alert alert-success"><%= success[0] %></div>
    <% } %>

    <h2>Washing Dashboard</h2>

    <ul class="nav nav-tabs">
      <li class="nav-item">
        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#createTab">
          Create Entry
        </button>
      </li>
      <li class="nav-item">
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#existingTab">
          Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3">
      <!-- CREATE TAB -->
      <div class="tab-pane fade show active" id="createTab">
        <div class="card">
          <div class="card-header">Create New Washing Entry</div>
          <div class="card-body">
            <form id="createForm" action="/washingdashboard/create" method="POST" enctype="multipart/form-data">
              <div class="mb-3">
                <label for="selectedLotIdSearch" class="form-label">Select Lot</label>
                <input type="text" id="selectedLotIdSearch" class="form-control" placeholder="Search assigned lot..." required />
                <input type="hidden" name="selectedLotId" id="selectedLotId" required />
                <ul class="list-group position-absolute" id="lotAutocomplete" style="z-index: 999;"></ul>
              </div>

              <div class="mb-3">
                <label class="form-label">Remark (optional)</label>
                <input type="text" name="remark" class="form-control" />
              </div>

              <div class="mb-3">
                <label class="form-label">Image (optional)</label>
                <input type="file" name="image_file" class="form-control" accept="image/*" />
              </div>

              <div class="mt-4" id="lotSizesContainer" style="display:none;">
                <h5>Sizes for This Lot</h5>
                <table class="table table-bordered" id="sizesTable">
                  <thead>
                    <tr>
                      <th>Size Label</th>
                      <th>Max Available</th>
                      <th>Enter Pieces</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
                <div class="mt-2">
                  <strong>Total Pieces Selected:</strong>
                  <span id="createTotalPieces">0</span>
                </div>
              </div>

              <button type="submit" class="btn btn-primary mt-3">Create Washing Entry</button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div class="tab-pane fade" id="existingTab">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0">Existing Washing Entries</h4>
          <a href="/washingdashboard/download-all" class="btn btn-success">
            <i class="fas fa-file-excel"></i> Download Excel
          </a>
        </div>

        <div class="input-group mb-3">
          <span class="input-group-text">
            <i class="fas fa-search"></i>
          </span>
          <input
            type="text"
            id="searchExisting"
            class="form-control"
            placeholder="Search by lot or SKU..."
          />
        </div>

        <div id="existingEntriesContainer" class="accordion"></div>
        <div id="loadMoreSentinel" style="height: 60px;"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div
    class="modal fade"
    id="updateModal"
    tabindex="-1"
    aria-labelledby="updateModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST">
          <div class="modal-header">
            <h5 class="modal-title" id="updateModalLabel">Update Washing Data</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p><strong>Updating Entry ID: </strong><span id="updatingEntryId"></span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead>
                <tr>
                  <th>Size Label</th>
                  <th>Already Used</th>
                  <th>Max Remain</th>
                  <th>New Pieces (Increment)</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <p class="small text-muted">Blank field = 0 increment.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Save Updates</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  <script>
    // Autocomplete for assigned lots
    const lotsData = <%- JSON.stringify(lots) %> || [];
    const selectedLotIdSearch = document.getElementById('selectedLotIdSearch');
    const selectedLotId = document.getElementById('selectedLotId');
    const lotAutocomplete = document.getElementById('lotAutocomplete');

    let currentFocus = -1;

    function showLotSuggestions() {
      lotAutocomplete.innerHTML = '';
      const term = selectedLotIdSearch.value.toLowerCase();
      if (!term) {
        lotAutocomplete.style.display = 'none';
        return;
      }
      const filtered = lotsData.filter(l =>
        `${l.lot_no} ${l.sku}`.toLowerCase().includes(term)
      );
      if (!filtered.length) {
        lotAutocomplete.style.display = 'none';
        return;
      }
      filtered.forEach(item => {
        const li = document.createElement('li');
        li.classList.add('list-group-item');
        li.textContent = `Lot ${item.lot_no} (SKU: ${item.sku})`;
        li.dataset.value = item.id;
        lotAutocomplete.appendChild(li);
      });
      lotAutocomplete.style.display = 'block';
    }

    selectedLotIdSearch.addEventListener('input', showLotSuggestions);

    lotAutocomplete.addEventListener('click', async (e) => {
      if (e.target && e.target.matches('li.list-group-item')) {
        selectLotItem(e.target);
      }
    });
    document.addEventListener('click', (e) => {
      if (!lotAutocomplete.contains(e.target) && !selectedLotIdSearch.contains(e.target)) {
        lotAutocomplete.style.display = 'none';
      }
    });

    async function selectLotItem(li) {
      selectedLotIdSearch.value = li.textContent;
      selectedLotId.value = li.dataset.value;
      lotAutocomplete.style.display = 'none';
      fetchLotSizes(li.dataset.value);
    }

    // Fetch lot sizes
    const lotSizesContainer = document.getElementById('lotSizesContainer');
    const sizesTableBody = document.querySelector('#sizesTable tbody');
    const createTotalPieces = document.getElementById('createTotalPieces');

    async function fetchLotSizes(lotId) {
      try {
        const res = await fetch(`/washingdashboard/get-lot-sizes/${lotId}`);
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const data = await res.json();
        renderSizes(data);
      } catch (err) {
        console.error('Error:', err);
        lotSizesContainer.style.display = 'none';
        sizesTableBody.innerHTML = '';
      }
    }

    function renderSizes(sizesArr) {
      sizesTableBody.innerHTML = '';
      lotSizesContainer.style.display = 'block';
      let total = 0;
      sizesArr.forEach(sz => {
        const tr = document.createElement('tr');

        const tdLabel = document.createElement('td');
        tdLabel.textContent = sz.size_label;
        tr.appendChild(tdLabel);

        const tdRemain = document.createElement('td');
        tdRemain.textContent = sz.remain;
        tr.appendChild(tdRemain);

        const tdInput = document.createElement('td');
        const inp = document.createElement('input');
        inp.type = 'number';
        inp.min = 0;
        inp.max = sz.remain;
        inp.value = 0;
        inp.classList.add('form-control');
        inp.dataset.sizeId = sz.id;
        inp.addEventListener('input', updateTotal);
        tdInput.appendChild(inp);
        tr.appendChild(tdInput);

        sizesTableBody.appendChild(tr);
      });
      createTotalPieces.textContent = '0';
    }

    function updateTotal() {
      let sum = 0;
      const inputs = sizesTableBody.querySelectorAll('input');
      inputs.forEach(inp => {
        const val = parseInt(inp.value, 10);
        if (!isNaN(val) && val > 0) sum += val;
      });
      createTotalPieces.textContent = sum;
    }

    // Submit create form
    const createForm = document.getElementById('createForm');
    createForm.addEventListener('submit', (e) => {
      const rows = sizesTableBody.querySelectorAll('tr');
      if (!rows.length) {
        alert('No sizes loaded. Please select a lot.');
        e.preventDefault();
        return;
      }
      rows.forEach(row => {
        const remain = parseInt(row.children[1].textContent, 10);
        const input = row.children[2].querySelector('input');
        let val = parseInt(input.value, 10);
        if (isNaN(val) || val < 0) val = 0;
        if (val > remain) {
          alert(`You requested ${val} but only ${remain} remain for size ${row.children[0].textContent}`);
          e.preventDefault();
          return;
        }
      });
      document.querySelectorAll('.sizeMappingField').forEach(f => f.remove());
      rows.forEach(row => {
        const label = row.children[0].textContent;
        const input = row.children[2].querySelector('input');
        let val = parseInt(input.value, 10);
        if (isNaN(val) || val < 0) val = 0;
        if (val > 0) {
          const hidden = document.createElement('input');
          hidden.type = 'hidden';
          hidden.classList.add('sizeMappingField');
          hidden.name = `sizes[${input.dataset.sizeId}]`;
          hidden.value = val;
          createForm.appendChild(hidden);
        }
      });
    });

    // Lazy-load existing
    let offset = 0;
    let loading = false;
    let hasMore = true;
    const existingContainer = document.getElementById('existingEntriesContainer');
    const sentinel = document.getElementById('loadMoreSentinel');
    const searchExisting = document.getElementById('searchExisting');

    async function loadMoreData() {
      if (loading || !hasMore) return;
      loading = true;
      const term = searchExisting.value.trim();

      try {
        const res = await fetch(`/washingdashboard/list-entries?offset=${offset}&search=${encodeURIComponent(term)}`);
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const data = await res.json();
        const list = data.data || [];
        hasMore = data.hasMore;

        list.forEach(item => {
          const card = document.createElement('div');
          card.classList.add('accordion-item');

          const headerId = `heading-${item.id}`;
          const collapseId = `collapse-${item.id}`;

          card.innerHTML = `
            <h2 class="accordion-header" id="${headerId}">
              <button class="accordion-button collapsed" type="button"
                      data-bs-toggle="collapse" data-bs-target="#${collapseId}"
                      aria-expanded="false" aria-controls="${collapseId}">
                Lot ${item.lot_no} (SKU: ${item.sku}) - Total Pieces: ${item.total_pieces}
              </button>
            </h2>
            <div id="${collapseId}" class="accordion-collapse collapse"
                 aria-labelledby="${headerId}" data-bs-parent="#existingEntriesContainer">
              <div class="accordion-body">
                <div class="d-flex justify-content-end mb-3">
                  <a href="/washingdashboard/challan/${item.id}" target="_blank"
                     class="btn btn-sm btn-info me-2">
                    Challan
                  </a>
                  <button class="btn btn-sm btn-warning"
                          data-bs-toggle="modal"
                          data-bs-target="#updateModal"
                          data-entry-id="${item.id}">
                    Update
                  </button>
                </div>
                <p><strong>ID:</strong> ${item.id}</p>
                <p><strong>Remark:</strong> ${item.remark || 'N/A'}</p>
                ${
                  item.image_url
                    ? `<p><strong>Image:</strong><br>
                       <img src="${item.image_url}" alt="WashingImg" style="max-width: 200px;"></p>`
                    : ''
                }
                <table class="table table-sm">
                  <thead>
                    <tr><th>Size Label</th><th>Pieces</th></tr>
                  </thead>
                  <tbody>
                    ${
                      item.sizes && item.sizes.length
                        ? item.sizes.map(sz => `
                            <tr>
                              <td>${sz.size_label}</td>
                              <td>${sz.pieces}</td>
                            </tr>
                          `).join('')
                        : '<tr><td colspan="2">No sizes found</td></tr>'
                    }
                  </tbody>
                </table>
              </div>
            </div>
          `;
          existingContainer.appendChild(card);
        });

        offset += list.length;
      } catch (err) {
        console.error('Error loading data:', err);
      } finally {
        loading = false;
      }
    }

    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) {
        loadMoreData();
      }
    }, { threshold: 0.1 });
    observer.observe(sentinel);

    searchExisting.addEventListener('input', () => {
      offset = 0;
      hasMore = true;
      existingContainer.innerHTML = '';
      loadMoreData();
    });
    loadMoreData();

    // Update modal
    const updateModal = document.getElementById('updateModal');
    const updateForm = document.getElementById('updateForm');
    const updateSizesTable = document.getElementById('updateSizesTable');
    const updatingEntryId = document.getElementById('updatingEntryId');

    if (updateModal) {
      updateModal.addEventListener('show.bs.modal', async (event) => {
        const button = event.relatedTarget;
        const entryId = button.getAttribute('data-entry-id');
        updatingEntryId.textContent = entryId;
        updateForm.action = '/washingdashboard/update/' + entryId;

        updateSizesTable.querySelector('tbody').innerHTML = '';
        try {
          const res = await fetch(`/washingdashboard/update/${entryId}/json`);
          if (!res.ok) throw new Error('HTTP ' + res.status);
          const data = await res.json();
          if (!data.sizes) return;

          data.sizes.forEach(sz => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${sz.size_label}</td>
              <td>${sz.pieces}</td>
              <td>${sz.remain != null ? sz.remain : 999999}</td>
              <td>
                <input type="number" class="form-control" min="0" value=""
                       data-size-label="${sz.size_label}" />
              </td>
            `;
            updateSizesTable.querySelector('tbody').appendChild(tr);
          });
        } catch (err) {
          console.error('Error fetching update sizes:', err);
        }
      });

      updateForm.addEventListener('submit', (e) => {
        const rowEls = updateSizesTable.querySelectorAll('tbody tr');
        document.querySelectorAll('.updateSizeMappingField').forEach(el => el.remove());

        for (const row of rowEls) {
          const label = row.children[0].textContent;
          const remain = parseInt(row.children[2].textContent, 10);
          const input = row.children[3].querySelector('input');
          let val = parseInt(input.value || '0', 10);
          if (isNaN(val) || val < 0) val = 0;
          if (val > remain) {
            alert(`Cannot add ${val} to size [${label}], only ${remain} remain`);
            e.preventDefault();
            return;
          }
          if (val > 0) {
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.classList.add('updateSizeMappingField');
            hidden.name = `updateSizes[${label}]`;
            hidden.value = val;
            updateForm.appendChild(hidden);
          }
        }
      });
    }
  </script>
</body>
</html>
