<!DOCTYPE html>
<html>
<head>
  <title>Challan Dashboard</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS CDN for styling -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    .load-more-container { margin: 20px 0; }
    .action-buttons { margin-top: 20px; }
  </style>
</head>
<body>
  <div class="container mt-4">
    <h1 class="mb-4">Challan Dashboard</h1>
    
    <!-- Flash messages -->
    <% if (error && error.length) { %>
      <div class="alert alert-danger">
        <% error.forEach(msg => { %>
          <p><%= msg %></p>
        <% }); %>
      </div>
    <% } %>
    
    <% if (success && success.length) { %>
      <div class="alert alert-success">
        <% success.forEach(msg => { %>
          <p><%= msg %></p>
        <% }); %>
      </div>
    <% } %>

    <!-- Search Input -->
    <div class="form-group">
      <input type="text" id="searchInput" class="form-control" placeholder="Search by SKU, Lot No, or Cutting Remark" value="<%= search %>">
    </div>

    <!-- Responsive Table for Challan Assignments with Selectable Rows -->
    <div class="table-responsive">
      <table class="table table-striped table-bordered" id="assignmentsTable">
        <thead>
          <tr>
            <th><input type="checkbox" id="selectAllCheckbox"></th>
            <th>ID</th>
            <th>Lot No</th>
            <th>SKU</th>
            <th>Total Pieces</th>
            <th>Assembly Remark</th>
            <th>Cutting Remark</th>
            <th>Target Day</th>
            <th>Assigned On</th>
            <th>Approval Status</th>
            <th>Assignment Remark</th>
            <th>Washer</th>
            <th>Master</th>
          </tr>
        </thead>
        <tbody>
          <% if (assignments && assignments.length) { %>
            <% assignments.forEach(a => { %>
              <tr data-id="<%= a.washing_id %>">
                <td><input type="checkbox" class="rowCheckbox"></td>
                <td><%= a.washing_id %></td>
                <td><%= a.lot_no %></td>
                <td><%= a.sku %></td>
                <td><%= a.total_pieces %></td>
                <td><%= a.assembly_remark %></td>
                <td><%= a.cutting_remark %></td>
                <td><%= a.target_day ? new Date(a.target_day).toLocaleDateString() : '' %></td>
                <td><%= a.assigned_on ? new Date(a.assigned_on).toLocaleString() : '' %></td>
                <td>
                  <% if (a.is_approved === 1) { %>
                    <span class="badge badge-success">Approved</span>
                  <% } else if (a.is_approved === 0) { %>
                    <span class="badge badge-danger">Denied</span>
                  <% } else { %>
                    <span class="badge badge-warning">Pending</span>
                  <% } %>
                </td>
                <td><%= a.assignment_remark || '' %></td>
                <td><%= a.washer_username %></td>
                <td><%= a.master_username %></td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr id="noRecordsRow">
              <td colspan="13" class="text-center">No records found.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Load More Button -->
    <div class="text-center load-more-container">
      <button id="loadMoreBtn" class="btn btn-primary">Load More</button>
    </div>

    <!-- Action Buttons for Selection -->
    <div class="action-buttons text-center">
      <button id="selectAllBtn" class="btn btn-secondary" disabled>Select All</button>
      <button id="generateChallanBtn" class="btn btn-info" disabled>Generate Challan</button>
      <button id="downloadChallanBtn" class="btn btn-success" disabled>Download Challan</button>
    </div>
  </div>

  <!-- Modal for Generating Challan -->
  <div class="modal fade" id="challanModal" tabindex="-1" role="dialog" aria-labelledby="challanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="challanModalLabel">Generate Challan</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <!-- Table to display selected records -->
          <div class="table-responsive">
            <table class="table table-bordered" id="modalTable">
              <thead>
                <tr>
                  <th>Lot No (Challan)</th>
                  <th>SKU</th>
                  <th>Total Pieces</th>
                  <th>Cutting Remark</th>
                </tr>
              </thead>
              <tbody>
                <!-- Selected rows will be inserted here via JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button id="confirmChallanBtn" type="button" class="btn btn-primary" disabled>Confirm (Disabled)</button>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Include jQuery, Popper.js, and Bootstrap JS for modal functionality -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <!-- JavaScript for Realtime Search, Pagination & Row Selection -->
  <script>
    // Debounce function: delays execution until user stops typing.
    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    // Global variables to track state.
    let currentOffset = document.querySelectorAll('#assignmentsTable tbody tr').length;
    let currentSearchQuery = document.getElementById('searchInput').value;
    let selectedRows = [];

    // Update the table rows (append or replace).
    function updateTable(assignments, append = false) {
      const tbody = document.querySelector('#assignmentsTable tbody');
      if (!append) {
        tbody.innerHTML = '';
      }
      if (assignments && assignments.length) {
        assignments.forEach(a => {
          const approvalBadge = (a.is_approved === 1) ? '<span class="badge badge-success">Approved</span>' :
                                (a.is_approved === 0) ? '<span class="badge badge-danger">Denied</span>' :
                                '<span class="badge badge-warning">Pending</span>';
          const tr = document.createElement('tr');
          tr.setAttribute('data-id', a.washing_id);
          tr.innerHTML = `
            <td><input type="checkbox" class="rowCheckbox"></td>
            <td>${a.washing_id}</td>
            <td>${a.lot_no}</td>
            <td>${a.sku}</td>
            <td>${a.total_pieces}</td>
            <td>${a.assembly_remark || ''}</td>
            <td>${a.cutting_remark || ''}</td>
            <td>${a.target_day ? new Date(a.target_day).toLocaleDateString() : ''}</td>
            <td>${a.assigned_on ? new Date(a.assigned_on).toLocaleString() : ''}</td>
            <td>${approvalBadge}</td>
            <td>${a.assignment_remark || ''}</td>
            <td>${a.washer_username}</td>
            <td>${a.master_username}</td>
          `;
          tbody.appendChild(tr);
        });
      } else if (!append) {
          tbody.innerHTML = `<tr><td colspan="13" class="text-center">No records found.</td></tr>`;
      }
      attachCheckboxHandlers();
    }

    // Fetch search results (for realtime search)
    async function fetchSearchResults(query) {
      currentOffset = 0; // Reset offset for a new search.
      const url = '/challandashboard/search?search=' + encodeURIComponent(query) + '&offset=' + currentOffset;
      try {
        const response = await fetch(url);
        const data = await response.json();
        updateTable(data.assignments, false);
        currentOffset += data.assignments.length;
        document.getElementById('loadMoreBtn').disabled = (data.assignments.length < 50);
        document.getElementById('loadMoreBtn').textContent = data.assignments.length < 50 ? 'No more records' : 'Load More';
      } catch (error) {
        console.error('Error fetching search results:', error);
      }
    }

    // Load more data based on current search criteria or default view.
    async function loadMoreData() {
      const loadMoreBtn = document.getElementById('loadMoreBtn');
      loadMoreBtn.disabled = true;
      loadMoreBtn.textContent = 'Loading...';
      const baseUrl = currentSearchQuery.trim() !== '' 
            ? '/challandashboard/search?search=' + encodeURIComponent(currentSearchQuery) 
            : '/challandashboard';
      const url = baseUrl + '&offset=' + currentOffset;
      try {
        const response = await fetch(url);
        const data = currentSearchQuery.trim() !== '' ? await response.json() : { assignments: [] };
        let assignments = data.assignments;
        updateTable(assignments, true);
        if (assignments.length) {
          currentOffset += assignments.length;
          loadMoreBtn.disabled = false;
          loadMoreBtn.textContent = 'Load More';
        } else {
          loadMoreBtn.textContent = 'No more records';
        }
      } catch (error) {
        console.error('Error loading more data:', error);
        loadMoreBtn.disabled = false;
        loadMoreBtn.textContent = 'Load More';
      }
    }

    // Manage checkbox selection and update global selectedRows array.
    function attachCheckboxHandlers() {
      const checkboxes = document.querySelectorAll('.rowCheckbox');
      checkboxes.forEach(checkbox => {
        checkbox.onchange = () => {
          selectedRows = [];
          document.querySelectorAll('.rowCheckbox').forEach(cb => {
            if (cb.checked) {
              // Retrieve row data from the parent row.
              const tr = cb.closest('tr');
              selectedRows.push({
                washing_id: tr.getAttribute('data-id'),
                lot_no: tr.children[2].textContent,
                sku: tr.children[3].textContent,
                total_pieces: tr.children[4].textContent,
                cutting_remark: tr.children[6].textContent,
              });
            }
          });
          // Enable buttons if any rows are selected.
          const enableState = selectedRows.length > 0;
          document.getElementById('generateChallanBtn').disabled = !enableState;
          document.getElementById('downloadChallanBtn').disabled = !enableState;
          document.getElementById('selectAllBtn').disabled = false;
        }
      });
    }

    // "Select All" functionality.
    document.getElementById('selectAllCheckbox').addEventListener('change', function() {
      const checked = this.checked;
      document.querySelectorAll('.rowCheckbox').forEach(cb => cb.checked = checked);
      // Trigger change event to update selection.
      document.querySelectorAll('.rowCheckbox').forEach(cb => cb.onchange());
    });

    // Attach event to load more button.
    document.getElementById('loadMoreBtn').addEventListener('click', loadMoreData);

    // Debounced search event handler.
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', debounce((e) => {
      currentSearchQuery = e.target.value;
      currentOffset = 0;
      fetchSearchResults(currentSearchQuery);
    }, 300));

    // "Generate Challan" button click handler.
    document.getElementById('generateChallanBtn').addEventListener('click', function() {
      const modalTbody = document.querySelector('#modalTable tbody');
      modalTbody.innerHTML = '';
      selectedRows.forEach(row => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${row.lot_no}</td>
          <td>${row.sku}</td>
          <td>${row.total_pieces}</td>
          <td>${row.cutting_remark || ''}</td>
        `;
        modalTbody.appendChild(tr);
      });
      // Show the modal using Bootstrap's modal method.
      $('#challanModal').modal('show');
    });

    // "Download Challan" button can have a similar event handler (for now, you might alert the selected data)
    document.getElementById('downloadChallanBtn').addEventListener('click', function() {
      alert('Download Challan functionality would process selected data: ' + JSON.stringify(selectedRows));
    });
  </script>
</body>
</html>
