<!-- views/finishingDashboard.ejs -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8"/>
  <title>Finishing Dashboard</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <style>
    .autocomplete-items {
      position: absolute;
      background: #fff;
      border: 1px solid #ccc;
      width: 100%;
      z-index: 9999;
      max-height: 300px;
      overflow-y: auto;
    }
    .autocomplete-items li {
      padding: 6px 10px;
      cursor: pointer;
      list-style: none;
    }
    .autocomplete-items li.active {
      background-color: #0d6efd;
      color: #fff;
    }
  </style>
</head>
<body class="bg-light">
  <nav class="navbar navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Finishing Dashboard</a>
      <div class="text-white">
        Welcome, <%= user.username %>
        <a href="/logout" class="btn btn-sm btn-danger ms-3">Logout</a>
      </div>
    </div>
  </nav>

  <div class="container my-4">
    <% if (error && error.length) { %>
      <div class="alert alert-danger"><%= error.join(' | ') %></div>
    <% } %>
    <% if (success && success.length) { %>
      <div class="alert alert-success"><%= success.join(' | ') %></div>
    <% } %>

    <h1>Finishing Dashboard</h1>

    <ul class="nav nav-tabs">
      <li class="nav-item">
        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#createTab">
          Create Entry
        </button>
      </li>
      <li class="nav-item">
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#listTab">
          Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3">
      <!-- CREATE TAB -->
      <div class="tab-pane fade show active" id="createTab">
        <div class="card">
          <div class="card-header">Create a New Finishing Entry</div>
          <div class="card-body">
            <form action="/finishingdashboard/create" method="POST" enctype="multipart/form-data">
              <!-- Autocomplete input -->
              <div class="mb-3 position-relative">
                <label class="form-label fw-semibold">Search Assignment (by lot/SKU)</label>
                <input
                  type="text"
                  id="assignmentSearch"
                  class="form-control"
                  placeholder="Type lot no or SKU..."
                  autocomplete="off"
                  required
                />
                <ul id="assignmentOptions" class="autocomplete-items d-none"></ul>
                <input type="hidden" name="selectedAssignmentId" id="selectedAssignmentId" />
              </div>

              <div class="row g-3 mb-3">
                <div class="col-md-4">
                  <label class="form-label">Remark (optional)</label>
                  <input type="text" class="form-control" name="remark" />
                </div>
                <div class="col-md-4">
                  <label class="form-label">Image (optional)</label>
                  <input type="file" class="form-control" name="image_file" accept="image/*" />
                </div>
              </div>

              <div>
                <h5>Sizes</h5>
                <p class="text-muted small">
                  After choosing an assignment above, the available sizes appear below.
                </p>
                <div id="sizesContainer" class="row g-2"></div>
              </div>

              <button type="submit" class="btn btn-primary mt-3">Create Finishing Entry</button>
            </form>
          </div>
        </div>
      </div>

      <!-- LIST ENTRIES TAB -->
      <div class="tab-pane fade" id="listTab">
        <div class="d-flex justify-content-between mb-3">
          <h4>Existing Finishing Entries</h4>
          <a href="/finishingdashboard/download-all" class="btn btn-success btn-sm">
            Download Excel
          </a>
        </div>

        <div class="input-group mb-3">
          <input
            type="text"
            id="searchInput"
            class="form-control"
            placeholder="Search by Lot or SKU..."
          />
          <button id="searchBtn" class="btn btn-secondary">Search</button>
        </div>

        <table class="table table-bordered align-middle">
          <thead>
            <tr>
              <th>ID</th>
              <th>Lot No</th>
              <th>SKU</th>
              <th>Total Pieces</th>
              <th>Remark</th>
              <th>Created</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="finishingTableBody">
            <!-- Filled by JS -->
          </tbody>
        </table>

        <div class="text-center">
          <button id="loadMoreBtn" class="btn btn-outline-primary">Load More</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Update Modal -->
  <div class="modal fade" id="updateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title">Update Finishing Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p>Updating Entry ID: <span id="updatingEntryId">-</span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead>
                <tr>
                  <th>Size Label</th>
                  <th>Already Used</th>
                  <th>Max Remain</th>
                  <th>New Pieces</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
            <small class="text-muted">
              Leave blank or 0 if no increment.
            </small>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              Save Updates
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  <script>
    /****************************************
     * 1) AUTOCOMPLETE
     ****************************************/
    const assignments = <%- JSON.stringify(assignments) %> || [];
    // Each object: { id, department, lot_no, sku, ... }

    const assignmentSearch = document.getElementById('assignmentSearch');
    const assignmentOptions = document.getElementById('assignmentOptions');
    const assignmentIdField = document.getElementById('selectedAssignmentId');
    const sizesContainer = document.getElementById('sizesContainer');

    let currentFocus = -1;

    function showOptions(list) {
      assignmentOptions.innerHTML = '';
      list.forEach(item => {
        const li = document.createElement('li');
        li.textContent = `Lot ${item.lot_no} (SKU: ${item.sku}) [${item.department}]`;
        li.dataset.value = item.id;
        assignmentOptions.appendChild(li);
      });
      assignmentOptions.classList.remove('d-none');
    }
    function hideOptions() {
      assignmentOptions.classList.add('d-none');
      currentFocus = -1;
    }

    assignmentSearch.addEventListener('input', () => {
      const val = assignmentSearch.value.trim().toLowerCase();
      if (!val) {
        hideOptions();
        return;
      }
      // Filter by lot_no or sku
      const filtered = assignments.filter(a =>
        (a.lot_no && a.lot_no.toLowerCase().includes(val)) ||
        (a.sku && a.sku.toLowerCase().includes(val))
      );
      if (filtered.length) {
        showOptions(filtered);
      } else {
        assignmentOptions.innerHTML = '';
        hideOptions();
      }
    });

    assignmentSearch.addEventListener('keydown', e => {
      const items = assignmentOptions.querySelectorAll('li');
      if (!items.length) return;

      if (e.key === 'ArrowDown') {
        e.preventDefault();
        currentFocus++;
        if (currentFocus >= items.length) currentFocus = items.length - 1;
        setActive(items);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        currentFocus--;
        if (currentFocus < 0) currentFocus = 0;
        setActive(items);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (currentFocus > -1 && items[currentFocus]) {
          pickItem(items[currentFocus]);
        }
      }
    });

    function setActive(items) {
      items.forEach((li, idx) => {
        li.classList.toggle('active', idx === currentFocus);
      });
    }
    function pickItem(li) {
      assignmentIdField.value = li.dataset.value;
      assignmentSearch.value = li.textContent;
      hideOptions();
      loadSizes(li.dataset.value);
    }

    assignmentOptions.addEventListener('click', e => {
      if (e.target && e.target.matches('li')) {
        pickItem(e.target);
      }
    });
    document.addEventListener('click', e => {
      if (!assignmentSearch.contains(e.target) && !assignmentOptions.contains(e.target)) {
        hideOptions();
      }
    });

    /****************************************
     * 2) LOAD SIZES
     ****************************************/
    async function loadSizes(assignmentId) {
      sizesContainer.innerHTML = '';
      if (!assignmentId) return;
      try {
        const res = await fetch(`/finishingdashboard/get-assignment-sizes/${assignmentId}`);
        if (!res.ok) throw new Error('Failed to fetch sizes');
        const data = await res.json();
        if (!Array.isArray(data) || !data.length) {
          sizesContainer.innerHTML = '<div class="col-12 text-danger">No sizes available.</div>';
          return;
        }
        data.forEach(sz => {
          const div = document.createElement('div');
          div.classList.add('col-sm-4', 'col-md-3');
          div.innerHTML = `
            <div class="input-group">
              <span class="input-group-text">
                ${sz.size_label}
                <br/><small>Remain: ${sz.remain}</small>
              </span>
              <input
                type="number"
                name="sizes[${sz.size_label}]"
                min="0"
                max="${sz.remain}"
                value="0"
                class="form-control"
              />
            </div>
          `;
          sizesContainer.appendChild(div);
        });
      } catch (err) {
        console.error(err);
        sizesContainer.innerHTML = '<div class="col-12 text-danger">Error loading sizes.</div>';
      }
    }

    /****************************************
     * 3) LAZY LOAD FINISHING_DATA
     ****************************************/
    let offset = 0;
    let hasMore = true;
    let currentSearch = '';

    const finishingTableBody = document.getElementById('finishingTableBody');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const searchBtn = document.getElementById('searchBtn');
    const searchInput = document.getElementById('searchInput');

    async function loadEntries() {
      if (!hasMore) return;
      try {
        const url = `/finishingdashboard/list-entries?search=${encodeURIComponent(currentSearch)}&offset=${offset}`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error('Failed to load entries');
        const json = await resp.json();
        const rows = json.data || [];
        rows.forEach(entry => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${entry.id}</td>
            <td>${entry.lot_no}</td>
            <td>${entry.sku}</td>
            <td>${entry.total_pieces}</td>
            <td>${entry.remark || ''}</td>
            <td>${entry.created_at}</td>
            <td>
              <a href="/finishingdashboard/challan/${entry.id}" target="_blank" class="btn btn-sm btn-info mb-1">
                Challan
              </a>
              <button
                class="btn btn-sm btn-warning mb-1"
                data-bs-toggle="modal"
                data-bs-target="#updateModal"
                data-entry-id="${entry.id}"
              >
                Update
              </button>
            </td>
          `;
          finishingTableBody.appendChild(tr);
        });
        offset += rows.length;
        hasMore = json.hasMore;
        if (!hasMore) loadMoreBtn.disabled = true;
      } catch (err) {
        console.error(err);
      }
    }

    loadMoreBtn.addEventListener('click', loadEntries);
    searchBtn.addEventListener('click', () => {
      currentSearch = searchInput.value.trim();
      offset = 0;
      hasMore = true;
      finishingTableBody.innerHTML = '';
      loadMoreBtn.disabled = false;
      loadEntries();
    });
    // initial load
    loadEntries();

    /****************************************
     * 4) UPDATE MODAL
     ****************************************/
    const updateModal = document.getElementById('updateModal');
    const updateForm = document.getElementById('updateForm');
    const updateSizesTable = document.getElementById('updateSizesTable').querySelector('tbody');
    const updatingEntryId = document.getElementById('updatingEntryId');

    updateModal.addEventListener('show.bs.modal', async (e) => {
      const button = e.relatedTarget;
      const entryId = button.getAttribute('data-entry-id');
      updateForm.action = '/finishingdashboard/update/' + entryId;
      updatingEntryId.textContent = entryId;
      updateSizesTable.innerHTML = '';

      try {
        const resp = await fetch(`/finishingdashboard/update/${entryId}/json`);
        if (!resp.ok) throw new Error('Failed update JSON');
        const data = await resp.json();
        if (!data.sizes) return;
        data.sizes.forEach(sz => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${sz.size_label}</td>
            <td>${sz.pieces}</td>
            <td>${sz.remain}</td>
            <td>
              <input type="number" min="0" class="form-control" placeholder="0" data-size-label="${sz.size_label}" />
            </td>
          `;
          updateSizesTable.appendChild(tr);
        });
      } catch(err) {
        console.error(err);
      }
    });

    updateForm.addEventListener('submit', (evt) => {
      // remove old hidden fields
      const oldFields = document.querySelectorAll('.updateSizeField');
      oldFields.forEach(f => f.remove());

      // build new fields
      const rows = updateSizesTable.querySelectorAll('tr');
      for (const row of rows) {
        const sizeLabel = row.children[0].textContent;
        const remain = parseInt(row.children[2].textContent, 10);
        const inp = row.children[3].querySelector('input');
        let val = parseInt(inp.value || '0', 10);
        if (val > remain) {
          alert(`Cannot add ${val} for size ${sizeLabel}, only ${remain} remain.`);
          evt.preventDefault();
          return;
        }
        if (val > 0) {
          const hidden = document.createElement('input');
          hidden.type = 'hidden';
          hidden.name = `updateSizes[${sizeLabel}]`;
          hidden.value = val;
          hidden.classList.add('updateSizeField');
          updateForm.appendChild(hidden);
        }
      }
    });
  </script>
</body>
</html>
