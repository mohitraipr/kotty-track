<!-- views/catalogUploadAdmin.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <title>Admin: All Uploads</title>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"/>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { background:#f8f9fa; }
    .wrapper { max-width:1100px; margin:2rem auto; }
    .date-card { margin-bottom:1.5rem; }
    .date-card .card-header { background:#e9ecef; font-weight:600; }
    .mkt-section { margin-top:1rem; }
    .file-table th, .file-table td {
      vertical-align:middle;
      font-size:.9rem;
    }
    #chartContainer { margin-bottom:2rem; }
  </style>
</head>
<body>
  <div class="wrapper">
    <h1 class="mb-4">Admin: All Uploads</h1>

    <% if (error && error.length) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <!-- Chart -->
    <div id="chartContainer" class="card">
      <div class="card-header">Uploads by User & Marketplace</div>
      <div class="card-body">
        <canvas id="uploadsChart" height="150"></canvas>
      </div>
    </div>

    <% 
      // Group detailed rows by date
      const groupedByDate = files.reduce((acc, f) => {
        const d = new Date(f.uploaded_at).toISOString().slice(0,10);
        acc[d] = acc[d] || [];
        acc[d].push(f);
        return acc;
      }, {});
      const dates = Object.keys(groupedByDate);
    %>

    <% dates.forEach(date => {
         const dayFiles    = groupedByDate[date];
         const totalForDay = dayFiles.length;
         // Then group that day's files by marketplace
         const byMarketplace = dayFiles.reduce((acc, f) => {
           acc[f.marketplace] = acc[f.marketplace] || [];
           acc[f.marketplace].push(f);
           return acc;
         }, {});
    %>
      <div class="card date-card">
        <div class="card-header">
          <%= new Date(date).toLocaleDateString() %>
          <span class="badge bg-primary ms-2"><%= totalForDay %></span>
        </div>
        <div class="card-body">
          <% Object.entries(byMarketplace).forEach(([mktName, mktFiles]) => { %>
            <div class="mkt-section">
              <h5>
                <%= mktName %>
                <span class="badge bg-secondary ms-1"><%= mktFiles.length %></span>
              </h5>
              <table class="table table-sm table-bordered file-table">
                <thead class="table-light">
                  <tr>
                    <th>ID</th>
                    <th>User</th>
                    <th>Filename</th>
                    <th>Time</th>
                    <th>Download</th>
                  </tr>
                </thead>
                <tbody>
                  <% mktFiles.forEach(f => { %>
                    <tr>
                      <td><%= f.id %></td>
                      <td><%= f.username %></td>
                      <td><%= f.original_filename %></td>
                      <td><%= new Date(f.uploaded_at).toLocaleTimeString() %></td>
                      <td>
                        <a href="/catalogUpload/download/<%= f.id %>"
                           class="btn btn-outline-primary btn-sm">
                          <i class="bi bi-download"></i>
                        </a>
                      </td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          <% }) %>
        </div>
      </div>
    <% }) %>
  </div>

  <script>
    // Prepare chart data
    const raw = <%- JSON.stringify(aggData) %>;
    const users = [...new Set(raw.map(r => r.username))];
    const mkts  = [...new Set(raw.map(r => r.marketplace))];

    // Build datasets per marketplace
    const datasets = mkts.map(m => ({
      label: m,
      data: users.map(u => {
        const rec = raw.find(r => r.username===u && r.marketplace===m);
        return rec ? rec.count : 0;
      }),
      // let Chart.js pick colors
      // weâ€™re using stacked bars
      stack: 'stack1'
    }));

    new Chart(
      document.getElementById('uploadsChart').getContext('2d'),
      {
        type: 'bar',
        data: {
          labels: users,
          datasets
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: false
            },
            legend: {
              position: 'top'
            }
          },
          scales: {
            x: { stacked: true },
            y: { stacked: true, beginAtZero: true, title: { display: true, text: 'Files Uploaded' } }
          }
        }
      }
    );
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
