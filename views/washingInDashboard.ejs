<!-- views/washingin.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Document metadata -->
  <meta charset="UTF-8" />
  <title>KOTTY - Washing In Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

  <!-- Bootstrap CSS for layout and components -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <!-- FontAwesome for icons -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <!-- Select2 CSS for enhanced dropdowns -->
  <link
    href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
    rel="stylesheet"
  />

  <style>
    /* Base page styling */
    body {
      background: #f8f9fa;        /* light gray background */
      color: #212529;             /* dark text */
      min-height: 100vh;          /* full viewport height */
      display: flex;
      flex-direction: column;
    }
    /* Card component adjustments */
    .card {
      border-radius: 6px;
      margin-bottom: 20px;
    }
    /* Navbar brand styling */
    .navbar-brand {
      font-weight: 500;
      font-size: 1.2rem;
    }
    /* Fade-in animation for dynamic items */
    .fade-in {
      animation: fadeIn 0.4s ease-in;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to   { opacity: 1; }
    }
    /* Main content flex grow */
    .main-content {
      flex: 1 0 auto;
    }
    /* Sentinel height for lazy-loading */
    #loadMoreSentinel {
      height: 40px;
    }
    /* Make Select2 span full width */
    .select2-container {
      width: 100% !important;
    }
  </style>
</head>
<body>
  <!-- NAVBAR -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid px-3">
      <!-- Brand/logo -->
      <a class="navbar-brand" href="#">
        <i class="fas fa-water"></i>
        Washing In
      </a>
      <!-- Mobile menu toggle button -->
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarContent"
        aria-controls="navbarContent"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <!-- Navbar links -->
      <div class="collapse navbar-collapse" id="navbarContent">
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <!-- Approve page -->
          <li class="nav-item me-2">
            <a href="/washingin/approve" class="btn btn-outline-light btn-sm">
              <i class="fas fa-check-circle"></i> Approve
            </a>
          </li>
          <!-- Assign to finishing -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-finishing" class="btn btn-outline-light btn-sm">
              <i class="fas fa-user-check"></i> Assign Finishing
            </a>
          </li>
          <!-- Assign re-wash -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-rewash" class="btn btn-outline-light btn-sm">
              <i class="fas fa-undo"></i> Re-wash
            </a>
          </li>
          <!-- Complete re-wash -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-rewash/pending" class="btn btn-outline-light btn-sm">
              <i class="fas fa-undo"></i> Complete Re-wash
            </a>
          </li>
          <!-- Logout -->
          <li class="nav-item">
            <a href="/logout" class="btn btn-sm btn-danger">
              <i class="fas fa-sign-out-alt"></i> Logout
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- FLASH MESSAGES -->
  <div class="container mt-3">
    <% if (error && error.length) { %>
      <% error.forEach(msg => { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= msg %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% }) %>
    <% } %>
    <% if (success && success.length) { %>
      <% success.forEach(msg => { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= msg %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% }) %>
    <% } %>
  </div>

  <!-- MAIN CONTENT -->
  <div class="container my-4 main-content">
    <h2 class="mb-4">
      <i class="fas fa-water"></i>
      Washing In Dashboard
    </h2>

    <!-- Tabs to switch between Create and Existing -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <!-- Create Entry tab -->
      <li class="nav-item" role="presentation">
        <button
          class="nav-link active"
          id="create-tab"
          data-bs-toggle="tab"
          data-bs-target="#createTabContent"
          type="button"
          role="tab"
          aria-controls="createTabContent"
          aria-selected="true"
        >
          <i class="fas fa-plus-circle"></i> Create Entry
        </button>
      </li>
      <!-- Existing Entries tab -->
      <li class="nav-item" role="presentation">
        <button
          class="nav-link"
          id="existing-tab"
          data-bs-toggle="tab"
          data-bs-target="#existingTabContent"
          type="button"
          role="tab"
          aria-controls="existingTabContent"
          aria-selected="false"
        >
          <i class="fas fa-list"></i> Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3" id="dashboardTabsContent">
      <!-- CREATE TAB CONTENT -->
      <div
        class="tab-pane fade show active"
        id="createTabContent"
        role="tabpanel"
      >
        <div class="card">
          <div class="card-header">
            <h4 class="mb-0">
              <i class="fas fa-plus-circle"></i>
              Create New Washing In Entry
            </h4>
          </div>
          <div class="card-body">
            <!-- Form to create new "washing in" entry -->
            <form
              id="createForm"
              action="/washingin/create"
              method="POST"
              enctype="multipart/form-data"
            >
              <div class="row">
                <!-- Select existing washing data record -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">
                    Select Washing Data
                  </label>
                  <select
                    id="selectedWashingDataId"
                    name="selectedWashingDataId"
                    class="form-select"
                    required
                  >
                    <option value="">-- Choose --</option>
                    <% lots.forEach(l => { %>
                      <option value="<%= l.id %>">
                        <% if (l.cutting_remark) { %>
                          - <%= l.cutting_remark %>
                        <% } %>
                        <%= l.lot_no %> (SKU:<%= l.sku %>) - total: <%= l.total_pieces %>
                      </option>
                    <% }) %>
                  </select>
                </div>
                <!-- Optional remark text -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">
                    Remark (optional)
                  </label>
                  <input
                    type="text"
                    class="form-control"
                    name="remark"
                    placeholder="Any remarks..."
                  />
                </div>
                <!-- Optional image upload -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">
                    Image (optional)
                  </label>
                  <input
                    type="file"
                    class="form-control"
                    name="image_file"
                    accept="image/*"
                  />
                </div>
              </div>

              <!-- SIZE SECTION: hidden until a record is selected -->
              <div id="sizeSection" style="display: none;">
                <h5>Sizes for This Washing Data</h5>
                <div class="table-responsive">
                  <table
                    class="table table-bordered align-middle"
                    id="sizeTable"
                  >
                    <thead class="table-light">
                      <tr>
                        <th>Size Label</th>
                        <th>Max Available</th>
                        <th>Enter Pieces</th>
                        <th>Assign to Finishing (Optional)</th>
                      </tr>
                    </thead>
                    <tbody></tbody>
                  </table>
                </div>
                <!-- Display total entered pieces -->
                <div class="mt-2">
                  <strong>Total Pieces Selected:</strong>
                  <span id="createTotalPieces">0</span>
                </div>
              </div>

              <!-- Submit button -->
              <button type="submit" class="btn btn-primary mt-3">
                <i class="fas fa-check"></i> Create & Assign
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB CONTENT -->
      <div
        class="tab-pane fade"
        id="existingTabContent"
        role="tabpanel"
      >
        <div
          class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center mb-3"
        >
          <h4 class="mb-2 mb-sm-0">
            <i class="fas fa-list"></i> Existing Entries
          </h4>
          <!-- Download all entries as Excel -->
          <a href="/washingin/download-all" class="btn btn-success">
            <i class="fas fa-file-excel"></i> Download Excel
          </a>
        </div>

        <!-- Search bar for filtering -->
        <div class="input-group mb-3">
          <span class="input-group-text">
            <i class="fas fa-search"></i>
          </span>
          <input
            type="text"
            id="searchExisting"
            class="form-control"
            placeholder="Search by lot or SKU..."
          />
        </div>

        <!-- Container for lazy-loaded existing entries -->
        <div id="existingEntriesContainer" class="accordion"></div>
        <!-- Sentinel for IntersectionObserver -->
        <div id="loadMoreSentinel"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL: editing an existing entry -->
  <div class="modal fade" id="updateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <!-- Modal header -->
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-edit"></i> Update Washing In Data
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <!-- Modal body: show current sizes and allow increments -->
          <div class="modal-body">
            <p>
              <strong>Updating Entry ID:</strong>
              <span id="updatingEntryId">-</span>
            </p>
            <div class="table-responsive">
              <table
                class="table table-bordered align-middle"
                id="updateSizesTable"
              >
                <thead class="table-light">
                  <tr>
                    <th>Size Label</th>
                    <th>Already Used</th>
                    <th>Max Remain</th>
                    <th>New Pieces (Increment)</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <p class="small text-muted">
              Leave blank or zero if no increment.
            </p>
          </div>
          <!-- Modal footer: actions -->
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i> Save Updates
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- JS LIBRARIES -->
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <script>
    $(function () {
      /* ---------- 0. GLOBALS ---------- */
      let finishingUsers   = [];   // Cache of users to assign finishing
      let existingOffset   = 0;    // Paging offset for existing entries
      let loading          = false;// Flag for in-flight loads
      let hasMore          = true; // Indicates more entries to load

      /* ---------- 1. CREATE FLOW ---------- */
      const $sizeSection       = $('#sizeSection'),
            $sizeTableBody     = $('#sizeTable tbody'),
            $createTotalPieces = $('#createTotalPieces'),
            $createForm        = $('#createForm');

      // Initialize Select2 on washing data dropdown
      $('#selectedWashingDataId').select2({
        placeholder: 'Select Washing Data',
        minimumResultsForSearch: 0 // Always show search field
      });

      // On selection change, fetch sizes & users
      $('#selectedWashingDataId').on('change', async function () {
        const lotId = $(this).val();
        if (!lotId) {
          // Reset UI if nothing selected
          $sizeSection.hide();
          $sizeTableBody.empty();
          $createTotalPieces.text('0');
          return;
        }
        try {
          // Fetch sizes and (once) finishing-users in parallel
          const [sizeRes, userRes] = await Promise.all([
            fetch(`/washingin/get-lot-sizes/${lotId}`),
            finishingUsers.length ? null : fetch('/washingin/create/assignable-users')
          ]);
          if (!sizeRes.ok) throw new Error('Size fetch failed');
          const sizes = await sizeRes.json();
          if (userRes && userRes.ok) {
            finishingUsers = (await userRes.json()).data || [];
          }
          // Render table of sizes
          $sizeSection.show();
          $sizeTableBody.empty();
          sizes.forEach(s => {
            const $tr = $(`
              <tr>
                <td>${s.size_label}</td>
                <td>${s.remain}</td>
                <td>
                  <input
                    type="number"
                    class="form-control"
                    min="0"
                    max="${s.remain}"
                    value="0"
                    data-size-id="${s.id}"
                    autocomplete="off"
                  >
                </td>
                <td>
                  <select class="form-select">
                    <option value="">--No Assignment--</option>
                  </select>
                </td>
              </tr>
            `);
            // Populate finishing-user dropdown
            const $sel = $tr.find('select');
            finishingUsers.forEach(u => {
              $sel.append(`<option value="${u.id}">${u.username}</option>`);
            });
            // Update total when user types
            $tr.find('input').on('input', updateCreateTotal);
            $sizeTableBody.append($tr);
          });
          updateCreateTotal();
        } catch (err) {
          console.error(err);
          // Reset on error
          $sizeSection.hide();
          $sizeTableBody.empty();
          $createTotalPieces.text('0');
        }
      });

      // Sum up all entered piece counts
      function updateCreateTotal() {
        let total = 0;
        $sizeTableBody.find('input').each((_, el) => {
          const v = parseInt(el.value, 10) || 0;
          total += v;
        });
        $createTotalPieces.text(total);
      }

      // On form submit, inject hidden fields for sizes & assignments
      $createForm.on('submit', function (e) {
        const $form = $(this);
        $form.find('.sizeField, .assignField').remove(); // Clear old

        let valid = true;
        $sizeTableBody.find('tr').each((_, row) => {
          const $row   = $(row),
                remain = parseInt($row.find('td').eq(1).text(), 10),
                $inp   = $row.find('input'),
                val    = parseInt($inp.val(), 10) || 0,
                sizeId = $inp.data('sizeId');

          // Prevent over-request
          if (val > remain) {
            alert(`Requested ${val} but only ${remain} remain for size ${$row.find('td').eq(0).text()}`);
            valid = false;
            return false; // Break loop
          }
          // Add hidden size field if > 0
          if (val > 0) {
            $('<input>', {
              type: 'hidden',
              name: `sizes[${sizeId}]`,
              value: val,
              class: 'sizeField'
            }).appendTo($form);
          }
          // Add assignment hidden field if selected
          const assign = $row.find('select').val();
          if (assign) {
            $('<input>', {
              type: 'hidden',
              name: `assignments[${sizeId}]`,
              value: assign,
              class: 'assignField'
            }).appendTo($form);
          }
        });

        if (!valid) e.preventDefault();
      });

      /* ---------- 2. EXISTING ENTRIES FLOW (lazy + search) ---------- */
      const $existingContainer = $('#existingEntriesContainer'),
            $searchExisting    = $('#searchExisting'),
            sentinel           = document.getElementById('loadMoreSentinel');

      // Load next batch of entries
      async function loadMoreEntries() {
        if (loading || !hasMore) return;
        loading = true;
        try {
          const url = `/washingin/list-entries?offset=${existingOffset}&search=${encodeURIComponent($searchExisting.val().trim())}`;
          const res = await fetch(url);
          if (!res.ok) throw new Error('Fetch error');
          const { data: items = [], hasMore: more } = await res.json();
          hasMore = more;

          items.forEach(it => {
            const hid = `heading-${it.id}`, cid = `collapse-${it.id}`;
            // Build table rows for sizes
            let rows = '';
            if (it.sizes && it.sizes.length) {
              rows = it.sizes.map(s => `<tr><td>${s.size_label}</td><td>${s.pieces}</td></tr>`).join('');
            } else {
              rows = '<tr><td colspan="2">No sizes found.</td></tr>';
            }
            // Append accordion item
            $existingContainer.append(`
              <div class="accordion-item fade-in">
                <h2 class="accordion-header" id="${hid}">
                  <button class="accordion-button collapsed"
                          data-bs-toggle="collapse"
                          data-bs-target="#${cid}"
                          aria-expanded="false"
                          aria-controls="${cid}">
                    <strong>Lot:</strong> ${it.lot_no} (SKU:${it.sku}) - Total: ${it.total_pieces}
                  </button>
                </h2>
                <div id="${cid}" class="accordion-collapse collapse" data-bs-parent="#existingEntriesContainer">
                  <div class="accordion-body">
                    <!-- Action buttons -->
                    <div class="d-flex justify-content-end mb-3">
                      <a href="/washingin/challan/${it.id}" class="btn btn-info btn-sm me-2" target="_blank">
                        <i class="fas fa-file-download"></i> Challan
                      </a>
                      <button class="btn btn-warning btn-sm"
                              data-bs-toggle="modal"
                              data-bs-target="#updateModal"
                              data-entry-id="${it.id}">
                        <i class="fas fa-edit"></i> Update
                      </button>
                    </div>
                    <!-- Entry details -->
                    <p>
                      <strong>ID:</strong> ${it.id}<br>
                      <strong>Total Pieces:</strong> ${it.total_pieces}<br>
                      <strong>Remark:</strong> ${it.remark || 'N/A'}
                    </p>
                    ${it.image_url ? `<p><img src="${it.image_url}" style="max-height:100px;"></p>` : ''}
                    <!-- Sizes list -->
                    <div class="table-responsive">
                      <table class="table table-sm table-bordered">
                        <thead><tr><th>Size Label</th><th>Pieces</th></tr></thead>
                        <tbody>${rows}</tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            `);
          });
          existingOffset += items.length;
        } catch (err) {
          console.error(err);
        } finally {
          loading = false;
        }
      }

      // Observe sentinel for infinite scroll
      new IntersectionObserver(entries => {
        if (entries[0].isIntersecting) loadMoreEntries();
      }, { root: null, rootMargin: '0px', threshold: 0.1 }).observe(sentinel);

      // Reset & reload on search input change
      $searchExisting.on('input', () => {
        existingOffset = 0;
        hasMore = true;
        $existingContainer.empty();
        loadMoreEntries();
      });

      // Initial load
      loadMoreEntries();

      /* ---------- 3. UPDATE MODAL HANDLING ---------- */
      const $updateModal = $('#updateModal'),
            $updateForm  = $('#updateForm'),
            $sizesBody   = $('#updateSizesTable tbody'),
            $upId        = $('#updatingEntryId');

      // Populate modal with current data on show
      $updateModal.on('show.bs.modal', async e => {
        const entryId = $(e.relatedTarget).data('entry-id');
        $updateForm.attr('action', `/washingin/update/${entryId}`);
        $upId.text(entryId);
        $sizesBody.empty();

        try {
          const res = await fetch(`/washingin/update/${entryId}/json`);
          if (!res.ok) throw new Error('Fetch error');
          const { sizes = [] } = await res.json();
          sizes.forEach(s => {
            $sizesBody.append(`
              <tr>
                <td>${s.size_label}</td>
                <td>${s.pieces}</td>
                <td>${s.remain}</td>
                <td>
                  <input type="number" class="form-control" min="0"
                         data-size-id="${s.id}" autocomplete="off">
                </td>
              </tr>
            `);
          });
        } catch (err) {
          console.error(err);
        }
      });

      // Refresh list when modal closes
      $updateModal.on('hidden.bs.modal', () => {
        $sizesBody.empty();
        $upId.text('-');
        existingOffset = 0;
        hasMore = true;
        $existingContainer.empty();
        loadMoreEntries();
      });

      // On modal form submit, inject hidden fields for increments
      $updateForm.on('submit', function (e) {
        const $form = $(this);
        $form.find('.updField').remove(); // Clear old

        let valid = true;
        $sizesBody.find('tr').each((_, tr) => {
          const $r     = $(tr),
                remain = +$r.find('td').eq(2).text(),
                $inp   = $r.find('input'),
                inc    = +$inp.val() || 0,
                id     = $inp.data('sizeId'),
                lbl    = $r.find('td').eq(0).text();

          // Validate increment
          if (inc > remain) {
            alert(`Cannot add ${inc}; only ${remain} remain for ${lbl}`);
            valid = false;
            return false; // break
          }
          // Add hidden field if > 0
          if (inc > 0) {
            $('<input>', {
              type:  'hidden',
              name:  `updateSizes[${id}]`,
              value: inc,
              class: 'updField'
            }).appendTo($form);
          }
        });

        if (!valid) e.preventDefault();
      });
    });
  </script>
</body>
</html>
