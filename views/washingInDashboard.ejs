<!-- views/washingin.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>KOTTY - Washing In Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

  <!-- Bootstrap & FontAwesome -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <!-- Select2 CSS (for searchable dropdown) -->
  <link
    href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
    rel="stylesheet"
  />

  <style>
    body {
      background-color: #f8f9fa;
      color: #212529;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    .card {
      border-radius: 6px;
      margin-bottom: 20px;
    }
    .navbar-brand {
      font-weight: 500;
      font-size: 1.2rem;
    }
    .fade-in {
      animation: fadeIn 0.4s ease-in;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to   { opacity: 1; }
    }
    .main-content {
      flex: 1 0 auto;
    }
    #loadMoreSentinel {
      height: 40px;
    }
    .select2-container {
      width: 100% !important;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid px-3">
      <a class="navbar-brand" href="#">
        <i class="fas fa-water"></i> Washing In
      </a>
      <!-- Toggler for mobile screens -->
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarContent"
        aria-controls="navbarContent"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarContent">
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <!-- Approve link -->
          <li class="nav-item me-2">
            <a href="/washingin/approve" class="btn btn-outline-light btn-sm">
              <i class="fas fa-check-circle"></i> Approve
            </a>
          </li>
          <!-- Assign finishing -->
          <li class="nav-item me-2">
            <a href="/washingin/assign-finishing" class="btn btn-outline-light btn-sm">
              <i class="fas fa-user-check"></i> Assign Finishing
            </a>
          </li>
          <li class="nav-item me-2">
            <a href="/washingin/assign-rewash" class="btn btn-outline-light btn-sm">
              <i class="fas fa-undo"></i> Re‑wash
            </a>
          </li>
          <li class="nav-item me-2">
            <a href="/washingin/assign-rewash/pending" class="btn btn-outline-light btn-sm">
              <i class="fas fa-undo"></i> Complete Re‑wash
            </a>
          </li>
          <!-- Logout -->
          <li class="nav-item">
            <a href="/logout" class="btn btn-sm btn-danger">
              <i class="fas fa-sign-out-alt"></i> Logout
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Flash Messages -->
  <div class="container mt-3">
    <% if (error && error.length > 0) { %>
      <% error.forEach(function(msg){ %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= msg %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% }) %>
    <% } %>
    <% if (success && success.length > 0) { %>
      <% success.forEach(function(msg){ %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= msg %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% }) %>
    <% } %>
  </div>

  <!-- Main Content -->
  <div class="container my-4 main-content">
    <h2 class="mb-4">
      <i class="fas fa-water"></i> Washing In Dashboard
    </h2>

    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button
          class="nav-link active"
          id="create-tab"
          data-bs-toggle="tab"
          data-bs-target="#createTabContent"
          type="button"
          role="tab"
          aria-controls="createTabContent"
          aria-selected="true"
        >
          <i class="fas fa-plus-circle"></i> Create Entry
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button
          class="nav-link"
          id="existing-tab"
          data-bs-toggle="tab"
          data-bs-target="#existingTabContent"
          type="button"
          role="tab"
          aria-controls="existingTabContent"
          aria-selected="false"
        >
          <i class="fas fa-list"></i> Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3" id="dashboardTabsContent">
      <!-- CREATE TAB -->
      <div
        class="tab-pane fade show active"
        id="createTabContent"
        role="tabpanel"
        aria-labelledby="create-tab"
      >
        <div class="card">
          <div class="card-header">
            <h4 class="mb-0">
              <i class="fas fa-plus-circle"></i> Create New Washing In Entry
            </h4>
          </div>
          <div class="card-body">
            <form
              id="createForm"
              action="/washingin/create"
              method="POST"
              enctype="multipart/form-data"
            >
              <div class="row">
                <!-- 1) SELECT which "washing_data" ID you're using -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">Select Washing Data</label>
                  <!-- We'll enhance this with Select2 -->
                  <select
                    id="selectedWashingDataId"
                    name="selectedWashingDataId"
                    class="form-select"
                    required
                  >
                    <option value="">-- Choose --</option>
                    <% lots.forEach(function(l) { %>
                      <option value="<%= l.id %>">
                        <% if (l.cutting_remark) { %>
                          - <%= l.cutting_remark %>
                        <% } %>
                        <%= l.lot_no %> (SKU: <%= l.sku %>) - total: <%= l.total_pieces %>
                      </option>
                    <% }) %>
                  </select>
                </div>
                <!-- remark -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">Remark (optional)</label>
                  <input
                    type="text"
                    class="form-control"
                    name="remark"
                    placeholder="Any remarks..."
                  />
                </div>
                <!-- image -->
                <div class="col-md-4 mb-3">
                  <label class="form-label fw-semibold">Image (optional)</label>
                  <input
                    type="file"
                    class="form-control"
                    name="image_file"
                    accept="image/*"
                  />
                </div>
              </div>

              <!-- 2) Sizes Table (dynamically populated) -->
              <div id="sizeSection" style="display:none;">
                <h5>Sizes for This Washing Data</h5>
                <div class="table-responsive">
                  <table class="table table-bordered align-middle" id="sizeTable">
                    <thead class="table-light">
                      <tr>
                        <th>Size Label</th>
                        <th>Max Available</th>
                        <th>Enter Pieces</th>
                        <th>Assign to Finishing (Optional)</th>
                      </tr>
                    </thead>
                    <tbody></tbody>
                  </table>
                </div>
                <div class="mt-2">
                  <strong>Total Pieces Selected:</strong>
                  <span id="createTotalPieces">0</span>
                </div>
              </div>

              <button type="submit" class="btn btn-primary mt-3">
                <i class="fas fa-check"></i> Create & Assign
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div
        class="tab-pane fade"
        id="existingTabContent"
        role="tabpanel"
        aria-labelledby="existing-tab"
      >
        <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center mb-3">
          <h4 class="mb-2 mb-sm-0">
            <i class="fas fa-list"></i> Existing Entries
          </h4>
          <a href="/washingin/download-all" class="btn btn-success">
            <i class="fas fa-file-excel"></i> Download Excel
          </a>
        </div>

        <!-- Search input for existing entries -->
        <div class="input-group mb-3">
          <span class="input-group-text"><i class="fas fa-search"></i></span>
          <input
            type="text"
            id="searchExisting"
            class="form-control"
            placeholder="Search by lot or SKU..."
          />
        </div>

        <!-- Container for lazy-loaded entries -->
        <div id="existingEntriesContainer" class="accordion"></div>
        <!-- IntersectionObserver sentinel -->
        <div id="loadMoreSentinel"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div
    class="modal fade"
    id="updateModal"
    tabindex="-1"
    aria-labelledby="updateModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title" id="updateModalLabel">
              <i class="fas fa-edit"></i> Update Washing In Data
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p><strong>Updating Entry ID:</strong> <span id="updatingEntryId">-</span></p>
            <div class="table-responsive">
              <table class="table table-bordered align-middle" id="updateSizesTable">
                <thead class="table-light">
                  <tr>
                    <th>Size Label</th>
                    <th>Already Used</th>
                    <th>Max Remain</th>
                    <th>New Pieces (Increment)</th>
                  </tr>
                </thead>
                <tbody id="updateSizesTableBody"></tbody>
              </table>
            </div>
            <p class="small text-muted">Leave blank or zero if no increment.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i> Save Updates
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Select2 JS (for the searchable dropdown) -->
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <script>
    $(document).ready(function() {
      // ------------------------------------------------------------
      // Initialize Select2 for the Washing Data dropdown
      // ------------------------------------------------------------
      $('#selectedWashingDataId').select2({
        placeholder: "Select Washing Data",
        allowClear: false,  // Force user to pick from list
        minimumResultsForSearch: 0 // Always show the search box
      });

      // Global variables (similar to your original code)
      let finishingUsers = [];
      let existingOffset = 0;
      let loading = false;
      let hasMore = true;

      // Cached jQuery selectors
      const $sizeSection       = $('#sizeSection');
      const $sizeTableBody     = $('#sizeTable tbody');
      const $createTotalPieces = $('#createTotalPieces');
      const $createForm        = $('#createForm');
      const $searchExisting    = $('#searchExisting');
      const $existingContainer = $('#existingEntriesContainer');
      const sentinel           = document.getElementById('loadMoreSentinel');


      // ------------------------------------------------------------
      // 1) CREATE FORM: on change of #selectedWashingDataId => fetch sizes
      // ------------------------------------------------------------
      $('#selectedWashingDataId').on('change', async function() {
        const val = $(this).val();
        if (!val) {
          $sizeSection.hide();
          $sizeTableBody.empty();
          $createTotalPieces.text('0');
          return;
        }

        try {
          // 1) Fetch the size data for the chosen lot
          const res = await fetch(`/washingin/get-lot-sizes/${val}`);
          if (!res.ok) throw new Error('HTTP ' + res.status);
          const sizeData = await res.json();

          // 2) Fetch finishing users (only once)
          if (!finishingUsers.length) {
            const userRes = await fetch('/washingin/create/assignable-users');
            if (userRes.ok) {
              const j = await userRes.json();
              finishingUsers = j.data || [];
            }
          }

          // 3) Render the size table
          renderSizes(sizeData);
        } catch (err) {
          console.error(err);
          $sizeSection.hide();
          $sizeTableBody.empty();
          $createTotalPieces.text('0');
        }
      });

      function renderSizes(sizes) {
        $sizeSection.show();
        $sizeTableBody.empty();
        sizes.forEach(s => {
          const $tr = $(`
            <tr>
              <td>${s.size_label}</td>
              <td>${s.remain}</td>
              <td>
                <input
                  type="number"
                  class="form-control"
                  min="0"
                  max="${s.remain}"
                  value="${s.remain}"
                  data-size-id="${s.id}"
                />
              </td>
              <td>
                <select class="form-select">
                  <option value="">--No Assignment--</option>
                </select>
              </td>
            </tr>
          `);

          // Populate finishing users
          const $select = $tr.find('select');
          finishingUsers.forEach(u => {
            $select.append(`<option value="${u.id}">${u.username}</option>`);
          });

          // Add an 'input' listener to update total
          $tr.find('input[type="number"]').on('input', updateCreateTotal);

          $sizeTableBody.append($tr);
        });
        updateCreateTotal();
      }

      function updateCreateTotal() {
        let sum = 0;
        $sizeTableBody.find('input[type="number"]').each(function() {
          const val = parseInt($(this).val(), 10);
          if (!isNaN(val) && val > 0) sum += val;
        });
        $createTotalPieces.text(sum);
      }

      // On submit => build hidden fields
      $createForm.on('submit', function(e) {
        // Remove old dynamic fields
        $('.sizeField').remove();
        $('.assignField').remove();

        $sizeTableBody.find('tr').each(function() {
          const $row    = $(this);
          const remain  = parseInt($row.find('td:nth-child(2)').text(), 10);
          const $input  = $row.find('input[type="number"]');
          let val       = parseInt($input.val(), 10);
          if (isNaN(val) || val < 0) val = 0;
          if (val > remain) {
            e.preventDefault();
            alert(`Requested ${val} but only ${remain} remain for size ${$row.find('td:first').text()}`);
            return false; // stop processing
          }

          // If user entered a positive value, create hidden field
          if (val > 0) {
            $('<input>', {
              type:  'hidden',
              name:  `sizes[${$input.data('sizeId')}]`,
              value: val,
              class: 'sizeField'
            }).appendTo($createForm);
          }

          // Finishing assignment
          const assignVal = $row.find('select').val();
          if (assignVal) {
            $('<input>', {
              type:  'hidden',
              name:  `assignments[${$input.data('sizeId')}]`,
              value: assignVal,
              class: 'assignField'
            }).appendTo($createForm);
          }
        });
      });


      // ------------------------------------------------------------
      // 2) EXISTING ENTRIES (LAZY LOAD + SEARCH)
      // ------------------------------------------------------------
      async function loadMoreEntries() {
        if (loading || !hasMore) return;
        loading = true;
        const searchVal = $searchExisting.val().trim();

        try {
          const res = await fetch(`/washingin/list-entries?offset=${existingOffset}&search=${encodeURIComponent(searchVal)}`);
          if (!res.ok) throw new Error('HTTP ' + res.status);
          const data = await res.json();
          const items = data.data || [];
          hasMore = data.hasMore;

          items.forEach(it => {
            const headerId   = `heading-${it.id}`;
            const collapseId = `collapse-${it.id}`;

            // Build size rows
            let sizeRows = '';
            if (it.sizes && it.sizes.length) {
              sizeRows = it.sizes.map(s => `
                <tr>
                  <td>${s.size_label}</td>
                  <td>${s.pieces}</td>
                </tr>
              `).join('');
            } else {
              sizeRows = `<tr><td colspan="2">No sizes found.</td></tr>`;
            }

            const cardHtml = `
              <div class="accordion-item fade-in">
                <h2 class="accordion-header" id="${headerId}">
                  <button class="accordion-button collapsed" type="button"
                    data-bs-toggle="collapse" data-bs-target="#${collapseId}"
                    aria-expanded="false" aria-controls="${collapseId}">
                    <strong>Lot:</strong> ${it.lot_no} (SKU: ${it.sku}) - Total: ${it.total_pieces}
                  </button>
                </h2>
                <div id="${collapseId}" class="accordion-collapse collapse"
                    aria-labelledby="${headerId}" data-bs-parent="#existingEntriesContainer">
                  <div class="accordion-body">
                    <div class="d-flex justify-content-end mb-3">
                      <a href="/washingin/challan/${it.id}" class="btn btn-info btn-sm me-2" target="_blank">
                        <i class="fas fa-file-download"></i> Challan
                      </a>
                      <button class="btn btn-warning btn-sm"
                        data-bs-toggle="modal"
                        data-bs-target="#updateModal"
                        data-entry-id="${it.id}">
                        <i class="fas fa-edit"></i> Update
                      </button>
                    </div>
                    <p>
                      <strong>ID:</strong> ${it.id}<br>
                      <strong>Total Pieces:</strong> ${it.total_pieces}<br>
                      <strong>Remark:</strong> ${it.remark || 'N/A'}
                    </p>
                    ${
                      it.image_url
                        ? `<p><strong>Image:</strong><br>
                           <img src="${it.image_url}" alt="WashingIn" style="max-height:100px;"></p>`
                        : ''
                    }
                    <div class="table-responsive">
                      <table class="table table-sm table-bordered">
                        <thead>
                          <tr>
                            <th>Size Label</th>
                            <th>Pieces</th>
                          </tr>
                        </thead>
                        <tbody>${sizeRows}</tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            `;
            $existingContainer.append(cardHtml);
          });

          existingOffset += items.length;
        } catch (err) {
          console.error('Error loading more entries:', err);
        } finally {
          loading = false;
        }
      }

      // IntersectionObserver for infinite scrolling
      const observer = new IntersectionObserver(entries => {
        if (entries[0].isIntersecting) {
          loadMoreEntries();
        }
      }, { root: null, rootMargin: '0px', threshold: 0.1 });
      observer.observe(sentinel);

      // On search => reset offset and reload
      $searchExisting.on('input', function() {
        existingOffset = 0;
        hasMore = true;
        $existingContainer.empty();
        loadMoreEntries();
      });

      // Initial load
      loadMoreEntries();


      // ------------------------------------------------------------
      // 3) UPDATE MODAL
      // ------------------------------------------------------------
      /* ---------- UPDATE MODAL ---------- */
  const $updateModal      = $('#updateModal');
  const $updateForm       = $('#updateForm');
  const $sizesTBody       = $('#updateSizesTableBody');   // NEW selector
  const $updatingEntryId  = $('#updatingEntryId');

  // ---- open modal & fetch data --------------------------------
  $updateModal.on('show.bs.modal', async function (e) {
    const entryId = $(e.relatedTarget).data('entry-id');

    // set form action + header text
    $updateForm.attr('action', `/washingin/update/${entryId}`);
    $updatingEntryId.text(entryId);

    $sizesTBody.empty();            // clear previous rows

    const res = await fetch(`/washingin/update/${entryId}/json`);
    if (!res.ok) return alert('Failed to fetch sizes.');
    const { sizes = [] } = await res.json();

    sizes.forEach(sz => {
      const tr = $(`
        <tr>
          <td>${sz.size_label}</td>
          <td>${sz.pieces}</td>
          <td>${sz.remain}</td>
          <td>
            <input type="number"
                   class="form-control"
                   min="0"
                   max="${sz.remain}"
                   data-size-label="${sz.size_label}">
          </td>
        </tr>
      `);
      $sizesTBody.append(tr);
    });
  });

  // ---- build hidden fields on submit --------------------------
/* ---- build hidden fields on submit -------------------------- */
$updateForm.on('submit', function (e) {
  $('.dynamicUpdField').remove();          // clean previous run
  let ok = true;

  $sizesTBody.find('tr').each(function () {
    const $row   = $(this);
    const remain = parseInt($row.children('td').eq(2).text(), 10);
    const $inp   = $row.find('input[type="number"]');
    const inc    = parseInt($inp.val() || '0', 10);
    const label  = $inp.data('size_label');   // <-- fixed

    if (inc > remain) {
      alert(`Cannot add ${inc} to size [${label}] – only ${remain} left.`);
      ok = false;
      return false;                                 // break .each()
    }
    if (inc > 0) {
      $('<input>', {
        type : 'hidden',
        name : `updateSizes[${label}]`,
        value: inc,
        class: 'dynamicUpdField'
      }).appendTo($updateForm);
    }
  });

  if (!ok) e.preventDefault();
});


    });
  </script>
</body>
</html>

