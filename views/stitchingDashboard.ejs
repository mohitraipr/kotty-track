<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>KOTTY - Stitching Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

  <!-- Bootstrap & FontAwesome -->
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <style>
    /* ----------------------------------------
       Base & Light Mode Styles
    ---------------------------------------- */
    body {
      background-color: #f8f9fa;
      color: #212529;
      transition: background-color 0.3s, color 0.3s;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    .card {
      border-radius: 6px;
      margin-bottom: 20px;
    }
    .navbar-brand {
      font-weight: 500;
      font-size: 1.2rem;
    }
    /* Container for main content (allows for a sticky footer if needed) */
    .main-content {
      flex: 1 0 auto;
    }
    /* ----------------------------------------
       Autocomplete Styles
    ---------------------------------------- */
    .autocomplete {
      position: relative;
      width: 100%;
    }
    .autocomplete-items {
      position: absolute;
      border: 1px solid #ced4da;
      border-top: none;
      z-index: 999;
      top: 100%;
      left: 0;
      right: 0;
      max-height: 220px;
      overflow-y: auto;
      background-color: #fff;
      display: none;
    }
    .autocomplete-items li {
      padding: 0.4rem 0.75rem;
      cursor: pointer;
    }
    .autocomplete-items li:hover {
      background-color: #e9ecef;
    }
    /* ----------------------------------------
       Fade-in Animation for Lazy Loading
    ---------------------------------------- */
    .fade-in {
      animation: fadeIn 0.4s ease-in;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to   { opacity: 1; }
    }
    /* ----------------------------------------
       Dark Mode Styles
    ---------------------------------------- */
    .dark-mode {
      background-color: #121212;
      color: #f8f9fa;
    }
    .dark-mode .navbar,
    .dark-mode .nav-tabs .nav-link {
      background-color: #1f1f1f !important;
      color: #fff;
    }
    .dark-mode .navbar .navbar-toggler-icon {
      filter: invert(1);
    }
    .dark-mode .card {
      background-color: #1e1e1e;
      color: #f8f9fa;
      border-color: #2a2a2a;
    }
    .dark-mode .modal-content {
      background-color: #1e1e1e;
      color: #f8f9fa;
      border-color: #2a2a2a;
    }
    .dark-mode .table-bordered > :not(caption) > * > * {
      border-color: #666;
    }
    .dark-mode .table-light {
      background-color: #272727;
      color: #fff;
    }
    .dark-mode .autocomplete-items {
      background-color: #333;
      color: #fff;
      border-color: #444;
    }
    .dark-mode .autocomplete-items li:hover {
      background-color: #4d4d4d;
    }
    .dark-mode .btn-close {
      filter: invert(1);
    }
    .dark-mode .form-control {
      background-color: #2b2b2b;
      color: #f8f9fa;
      border-color: #444;
    }
    .dark-mode input::placeholder {
      color: #ccc;
    }
    .dark-mode select, .dark-mode textarea {
      background-color: #2b2b2b;
      color: #f8f9fa;
      border-color: #444;
    }
    .dark-mode .input-group-text {
      background-color: #2b2b2b;
      border-color: #444;
      color: #fff;
    }
    .dark-mode .alert {
      background-color: #2b2b2b;
      color: #fff;
      border-color: #444;
    }
    .dark-mode a, .dark-mode .nav-link {
      color: #a5d6ff;
    }
    /* ----------------------------------------
       Language Toggle Styles
    ---------------------------------------- */
    [data-lang="en"] {
      display: inline;
    }
    [data-lang="hi"] {
      display: none;
    }
    .lang-hi [data-lang="en"] {
      display: none !important;
    }
    .lang-hi [data-lang="hi"] {
      display: inline !important;
    }
    /* ----------------------------------------
       Mobile Friendly Adjustments
    ---------------------------------------- */
    @media (max-width: 767px) {
      .navbar-nav {
        text-align: center;
      }
      .navbar-nav .nav-item {
        margin: 0.5rem 0;
      }
      .container {
        padding: 0 15px;
      }
      .card {
        margin: 10px 0;
      }
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid px-3">
      <a class="navbar-brand" href="#">
        <i class="fas fa-tshirt"></i>
        <span data-lang="en">KOTTY</span>
        <span data-lang="hi">कोटी</span>
      </a>
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarContent"
        aria-controls="navbarContent"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarContent">
        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
          <!-- Dark Mode Toggle -->
          <li class="nav-item me-3">
            <button id="darkModeToggle" class="btn btn-sm btn-outline-light">
              <i class="fas fa-moon"></i>
              <span data-lang="en">Dark Mode</span>
              <span data-lang="hi">डार्क मोड</span>
            </button>
          </li>
          <!-- Language Toggle -->
          <li class="nav-item me-3">
            <div class="d-flex align-items-center text-white">
              <label class="me-2">
                <input type="radio" name="language" value="en" checked /> EN
              </label>
              <label>
                <input type="radio" name="language" value="hi" /> हिंदी
              </label>
            </div>
          </li>
          <!-- Conditional Navigation Link -->
          <% if (user.username && user.username.toLowerCase().includes('hoisery')) { %>
            <li class="nav-item me-2">
              <a href="/stitchingdashboard/assign-finishing" class="btn btn-outline-light btn-sm">
                <i class="fas fa-check-circle"></i>
                <span data-lang="en">Assign Finishing</span>
                <span data-lang="hi">फिनिशिंग सौंपें</span>
              </a>
            </li>
          <% } else { %>
            <li class="nav-item me-2">
              <a href="/stitchingdashboard/assign-jeansassembly" class="btn btn-outline-light btn-sm">
                <i class="fas fa-check-circle"></i>
                <span data-lang="en">Assign Jeans Assembly</span>
                <span data-lang="hi">जीन्स असेंबली</span>
              </a>
            </li>
          <% } %>
          <li class="nav-item me-2">
            <a href="/stitchingdashboard/approve" class="btn btn-outline-light btn-sm">
              <i class="fas fa-check-circle"></i>
              <span data-lang="en">Approve</span>              
            </a>
          </li>
          <!-- Logout -->
          <li class="nav-item">
            <a href="/logout" class="btn btn-sm btn-danger">
              <i class="fas fa-sign-out-alt"></i>
              <span data-lang="en">Logout</span>
              <span data-lang="hi">लॉगआउट</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="container my-4 main-content">
    <h2 class="mb-4">
      <span data-lang="en">Stitching Dashboard</span>
      <span data-lang="hi">सिलाई डैशबोर्ड</span>
    </h2>

    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button
          class="nav-link active"
          id="create-tab"
          data-bs-toggle="tab"
          data-bs-target="#createTabContent"
          type="button"
          role="tab"
          aria-controls="createTabContent"
          aria-selected="true"
        >
          <i class="fas fa-plus-circle"></i>
          <span data-lang="en">Create Entry</span>
          <span data-lang="hi">नई एंट्री</span>
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button
          class="nav-link"
          id="existing-tab"
          data-bs-toggle="tab"
          data-bs-target="#existingTabContent"
          type="button"
          role="tab"
          aria-controls="existingTabContent"
          aria-selected="false"
        >
          <i class="fas fa-list"></i>
          <span data-lang="en">Existing Entries</span>
          <span data-lang="hi">मौजूदा एंट्री</span>
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3" id="dashboardTabsContent">
      <!-- CREATE TAB -->
      <div
        class="tab-pane fade show active"
        id="createTabContent"
        role="tabpanel"
        aria-labelledby="create-tab"
      >
        <div class="card">
          <div class="card-header">
            <h4 class="mb-0">
              <i class="fas fa-plus-circle"></i>
              <span data-lang="en">Create New Stitching Entry</span>
              <span data-lang="hi">नई सिलाई एंट्री</span>
            </h4>
          </div>
          <div class="card-body">
            <form
              id="createForm"
              action="/stitchingdashboard/create"
              method="POST"
              enctype="multipart/form-data"
            >
              <div class="row mb-3">
                <!-- Select Lot -->
                <div class="col-md-4 mb-3 mb-md-0">
                  <label class="form-label fw-semibold">
                    <span data-lang="en">Select Lot</span>
                    <span data-lang="hi">लॉट चुनें</span>
                  </label>
                  <div class="autocomplete">
                    <input
                      type="text"
                      id="selectedLotIdSearch"
                      class="form-control"
                      placeholder="Search lot by SKU or number..."
                      autocomplete="off"
                      required
                    />
                    <input
                      type="hidden"
                      name="selectedLotId"
                      id="selectedLotId"
                      required
                    />
                    <ul class="autocomplete-items list-group d-none" id="lotOptions"></ul>
                  </div>
                </div>

                <!-- Remark -->
                <div class="col-md-4 mb-3 mb-md-0">
                  <label class="form-label fw-semibold">
                    <span data-lang="en">Remark (optional)</span>
                    <span data-lang="hi">टिप्पणी (वैकल्पिक)</span>
                  </label>
                  <input
                    type="text"
                    class="form-control"
                    name="remark"
                    placeholder="Any remarks..."
                  />
                </div>

                <!-- Image -->
                <div class="col-md-4">
                  <label class="form-label fw-semibold">
                    <span data-lang="en">Image (optional)</span>
                    <span data-lang="hi">चित्र (वैकल्पिक)</span>
                  </label>
                  <input
                    type="file"
                    class="form-control"
                    name="image_file"
                    accept="image/*"
                  />
                </div>
              </div>

              <!-- Sizes -->
              <div class="mt-4" id="lotSizesContainer" style="display:none;">
                <h5>
                  <span data-lang="en">Sizes for This Lot</span>
                  <span data-lang="hi">इस लॉट के साइज़</span>
                </h5>
                <div class="table-responsive">
                  <table class="table table-bordered align-middle" id="lotSizesTable">
                    <thead class="table-light">
                      <tr>
                        <th>
                          <span data-lang="en">Size Label</span>
                          <span data-lang="hi">साइज़</span>
                        </th>
                        <th>
                          <span data-lang="en">Max Available</span>
                          <span data-lang="hi">अधिकतम उपलब्ध</span>
                        </th>
                        <th>
                          <span data-lang="en">Enter Pieces</span>
                          <span data-lang="hi">टुकड़े दर्ज करें</span>
                        </th>
                      </tr>
                    </thead>
                    <tbody></tbody>
                  </table>
                </div>
                <div class="mt-2">
                  <strong>
                    <span data-lang="en">Total Pieces Selected:</span>
                    <span data-lang="hi">कुल टुकड़े:</span>
                  </strong>
                  <span id="createTotalPieces">0</span>
                </div>
              </div>

              <button type="submit" class="btn btn-primary mt-3">
                <i class="fas fa-check"></i>
                <span data-lang="en">Create Stitching Entry</span>
                <span data-lang="hi">सिलाई एंट्री बनाएं</span>
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div
        class="tab-pane fade"
        id="existingTabContent"
        role="tabpanel"
        aria-labelledby="existing-tab"
      >
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0">
            <i class="fas fa-list"></i>
            <span data-lang="en">Existing Entries</span>
            <span data-lang="hi">मौजूदा एंट्री</span>
          </h4>
          <a href="/stitchingdashboard/download-all" class="btn btn-success">
            <i class="fas fa-file-excel"></i>
            <span data-lang="en">Download Excel</span>
            <span data-lang="hi">एक्सेल डाउनलोड</span>
          </a>
        </div>

        <!-- Search input for existing entries -->
        <div class="input-group mb-3">
          <span class="input-group-text">
            <i class="fas fa-search"></i>
          </span>
          <input
            type="text"
            id="searchExisting"
            class="form-control"
            placeholder="Search by lot or SKU..."
          />
        </div>

        <!-- Container for lazy-loaded entries -->
        <div id="existingEntriesContainer" class="accordion"></div>

        <!-- IntersectionObserver sentinel -->
        <div id="loadMoreSentinel" style="height: 60px;"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div
    class="modal fade"
    id="updateModal"
    tabindex="-1"
    aria-labelledby="updateModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title" id="updateModalLabel">
              <i class="fas fa-edit"></i>
              <span data-lang="en">Update Stitching Data</span>
              <span data-lang="hi">सिलाई डेटा अपडेट करें</span>
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>
              <strong>
                <span data-lang="en">Updating Entry ID:</span>
                <span data-lang="hi">अपडेट हो रही एंट्री आईडी:</span>
              </strong>
              <span id="updatingEntryId">-</span>
            </p>
            <div class="table-responsive">
              <table class="table table-bordered align-middle" id="updateSizesTable">
                <thead class="table-light">
                  <tr>
                    <th>
                      <span data-lang="en">Size Label</span>
                      <span data-lang="hi">साइज़</span>
                    </th>
                    <th>
                      <span data-lang="en">Already Used</span>
                      <span data-lang="hi">पहले से उपयोग</span>
                    </th>
                    <th>
                      <span data-lang="en">Max Remain</span>
                      <span data-lang="hi">अधिकतम शेष</span>
                    </th>
                    <th>
                      <span data-lang="en">New Pieces (Increment)</span>
                      <span data-lang="hi">नए टुकड़े (वृद्धि)</span>
                    </th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
            <p class="small text-muted">
              <span data-lang="en">If you leave a field blank, it counts as 0 increment.</span>
              <span data-lang="hi">यदि कोई फ़ील्ड खाली छोड़ी गई तो वह 0 जोड़ेगी।</span>
            </p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              <span data-lang="en">Cancel</span>
              <span data-lang="hi">रद्द करें</span>
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i>
              <span data-lang="en">Save Updates</span>
              <span data-lang="hi">सेव करें</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    /*****************************************************
     * Dark Mode Toggle
     *****************************************************/
    const darkModeToggle = document.getElementById('darkModeToggle');
    darkModeToggle.addEventListener('click', () => {
      document.body.classList.toggle('dark-mode');
    });

    /*****************************************************
     * Language Toggle
     *****************************************************/
    const langRadios = document.querySelectorAll('input[name="language"]');
    langRadios.forEach(radio => {
      radio.addEventListener('change', (e) => {
        if (e.target.value === 'hi') {
          document.body.classList.add('lang-hi');
        } else {
          document.body.classList.remove('lang-hi');
        }
      });
    });

    /*****************************************************
     * LOT AUTOCOMPLETE
     * Only show matching items as the user types.
     *****************************************************/
    const existingLots = <%- JSON.stringify(lots) %> || [];
    const lotAutocompleteData = existingLots.map(l => ({
      displayText: `${l.lot_no} (SKU: ${l.sku})`,
      value: l.id
    }));

    const selectedLotIdSearch = document.getElementById('selectedLotIdSearch');
    const selectedLotId = document.getElementById('selectedLotId');
    const lotOptions = document.getElementById('lotOptions');
    let currentFocusIndex = -1;

    function populateLotOptions(listData) {
      lotOptions.innerHTML = '';
      listData.forEach(item => {
        const li = document.createElement('li');
        li.classList.add('list-group-item', 'list-group-item-action');
        li.textContent = item.displayText;
        li.dataset.value = item.value;
        lotOptions.appendChild(li);
      });
    }

    function showLotDropdown() {
      if (!lotOptions.classList.contains('d-block')) {
        lotOptions.classList.remove('d-none');
        lotOptions.classList.add('d-block');
      }
    }
    function hideLotDropdown() {
      lotOptions.classList.remove('d-block');
      lotOptions.classList.add('d-none');
      currentFocusIndex = -1;
    }

    selectedLotIdSearch.addEventListener('input', () => {
      const searchTerm = selectedLotIdSearch.value.trim().toLowerCase();
      if (searchTerm.length === 0) {
        hideLotDropdown();
        return;
      }
      const filtered = lotAutocompleteData.filter(item =>
        item.displayText.toLowerCase().includes(searchTerm)
      );
      if (filtered.length > 0) {
        populateLotOptions(filtered);
        showLotDropdown();
      } else {
        lotOptions.innerHTML = '';
        hideLotDropdown();
      }
    });

    // Keyboard navigation for autocomplete
    selectedLotIdSearch.addEventListener('keydown', (e) => {
      const items = lotOptions.querySelectorAll('li');
      if (!items.length) return;
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        currentFocusIndex++;
        if (currentFocusIndex >= items.length) currentFocusIndex = items.length - 1;
        setActiveItem(items);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        currentFocusIndex--;
        if (currentFocusIndex < 0) currentFocusIndex = 0;
        setActiveItem(items);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (currentFocusIndex > -1 && items[currentFocusIndex]) {
          selectLotItem(items[currentFocusIndex]);
        }
      }
    });

    function setActiveItem(items) {
      items.forEach((li, idx) => {
        li.classList.toggle('active', idx === currentFocusIndex);
      });
    }

    function selectLotItem(li) {
      const val = li.dataset.value;
      selectedLotId.value = val;
      selectedLotIdSearch.value = li.textContent;
      hideLotDropdown();
      fetchLotSizes(val);
    }

    // Click selection for autocomplete
    lotOptions.addEventListener('click', (e) => {
      if (e.target && e.target.matches('li.list-group-item')) {
        selectLotItem(e.target);
      }
    });

    document.addEventListener('click', (e) => {
      if (!selectedLotIdSearch.contains(e.target) && !lotOptions.contains(e.target)) {
        hideLotDropdown();
      }
    });

    /*****************************************************
     * FETCH LOT SIZES & RENDER
     *****************************************************/
    const lotSizesContainer = document.getElementById('lotSizesContainer');
    const lotSizesTableBody = document.querySelector('#lotSizesTable tbody');
    const createTotalPiecesElem = document.getElementById('createTotalPieces');

    async function fetchLotSizes(lotId) {
      try {
        const res = await fetch(`/stitchingdashboard/get-lot-sizes/${lotId}`);
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const data = await res.json();
        renderLotSizes(data);
      } catch (err) {
        console.error('Error fetching lot sizes:', err);
        lotSizesContainer.style.display = 'none';
        lotSizesTableBody.innerHTML = '';
        createTotalPiecesElem.textContent = '0';
      }
    }

    function renderLotSizes(sizesArr) {
      lotSizesContainer.style.display = 'block';
      lotSizesTableBody.innerHTML = '';
      sizesArr.forEach(sz => {
        const tr = document.createElement('tr');

        const tdLabel = document.createElement('td');
        tdLabel.textContent = sz.size_label;
        tr.appendChild(tdLabel);

        const tdRemain = document.createElement('td');
        tdRemain.textContent = sz.remain;
        tr.appendChild(tdRemain);

        const tdInput = document.createElement('td');
        const inp = document.createElement('input');
        inp.type = 'number';
        inp.min = '1';
        inp.max = String(sz.remain);
        inp.value = '0';
        inp.classList.add('form-control');
        inp.dataset.sizeId = sz.id;
        inp.required = true;
        inp.addEventListener('input', updateCreateTotal);
        tdInput.appendChild(inp);
        tr.appendChild(tdInput);

        lotSizesTableBody.appendChild(tr);
      });
      updateCreateTotal();
    }

    function updateCreateTotal() {
      let sum = 0;
      const inputs = lotSizesTableBody.querySelectorAll('input[type="number"]');
      inputs.forEach(inp => {
        const val = parseInt(inp.value, 10);
        if (!isNaN(val) && val > 0) {
          sum += val;
        }
      });
      createTotalPiecesElem.textContent = sum;
    }

    /*****************************************************
     * CREATE FORM VALIDATION
     *****************************************************/
    const createForm = document.getElementById('createForm');
    createForm.addEventListener('submit', (e) => {
      const rows = lotSizesTableBody.querySelectorAll('tr');
      if (!rows.length) {
        alert('No sizes found or no lot selected!');
        e.preventDefault();
        return;
      }
      for (const row of rows) {
        const remain = parseInt(row.children[1].textContent, 10);
        const input = row.children[2].querySelector('input');
        let val = parseInt(input.value, 10);
        if (isNaN(val) || val < 0) {
          alert(`Invalid input for size [${row.children[0].textContent}]`);
          e.preventDefault();
          return;
        }
        if (val > remain) {
          alert(`You requested ${val} pieces for size [${row.children[0].textContent}] but only ${remain} remain!`);
          e.preventDefault();
          return;
        }
      }
      // Build hidden fields for submission
      const old = document.querySelectorAll('.sizeMappingField');
      old.forEach(el => el.remove());
      for (const row of rows) {
        const input = row.children[2].querySelector('input');
        let val = parseInt(input.value, 10);
        if (isNaN(val) || val < 0) val = 0;
        if (val > 0) {
          const sizeId = input.dataset.sizeId;
          const hidden = document.createElement('input');
          hidden.type = 'hidden';
          hidden.classList.add('sizeMappingField');
          hidden.name = `sizes[${sizeId}]`;
          hidden.value = val;
          hidden.setAttribute('required', '');
          createForm.appendChild(hidden);
        }
      }
    });

    /*****************************************************
     * LAZY LOADING FOR EXISTING ENTRIES
     *****************************************************/
    let existingOffset = 0;
    let loading = false;
    let hasMore = true;
    const existingContainer = document.getElementById('existingEntriesContainer');
    const sentinel = document.getElementById('loadMoreSentinel');
    const searchInput = document.getElementById('searchExisting');

    async function loadMoreData() {
      if (loading || !hasMore) return;
      loading = true;
      const searchTerm = searchInput.value.trim();

      try {
        const res = await fetch(`/stitchingdashboard/list-entries?offset=${existingOffset}&search=${encodeURIComponent(searchTerm)}`);
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const data = await res.json();
        const entries = data.data || [];
        hasMore = data.hasMore;

        entries.forEach(item => {
          const card = document.createElement('div');
          card.classList.add('accordion-item', 'fade-in');

          const headerId = `heading-${item.id}`;
          const collapseId = `collapse-${item.id}`;

          card.innerHTML = `
            <h2 class="accordion-header" id="${headerId}">
              <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${collapseId}" aria-expanded="false" aria-controls="${collapseId}">
                <strong>Lot:</strong> ${item.lot_no} &nbsp; (SKU: ${item.sku}) &nbsp; (Total Pieces: ${item.total_pieces})
              </button>
            </h2>
            <div id="${collapseId}" class="accordion-collapse collapse" aria-labelledby="${headerId}" data-bs-parent="#existingEntriesContainer">
              <div class="accordion-body">
                <div class="d-flex justify-content-end mb-3">
                  <a href="/stitchingdashboard/challan/${item.id}" class="btn btn-sm btn-info me-2" target="_blank">
                    <i class="fas fa-file-download"></i> Challan
                  </a>
                  <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#updateModal" data-entry-id="${item.id}">
                    <i class="fas fa-edit"></i>
                    <span data-lang="en">Update</span>
                    <span data-lang="hi">अपडेट</span>
                  </button>
                </div>
                <p class="mb-2">
                  <strong>ID:</strong> ${item.id}<br>
                  <strong>Total Pieces:</strong> ${item.total_pieces}<br>
                  <strong>Remark:</strong> ${item.remark || 'N/A'}
                </p>
                ${
                  item.image_url
                    ? `<p>
                         <strong>Image:</strong><br>
                         <img src="${item.image_url}" alt="Stitch" style="max-height: 100px;">
                       </p>`
                    : ''
                }
                <div class="table-responsive">
                  <table class="table table-sm table-bordered">
                    <thead>
                      <tr>
                        <th>Size Label</th>
                        <th>Pieces</th>
                      </tr>
                    </thead>
                    <tbody>
                      ${
                        item.sizes && item.sizes.length
                          ? item.sizes.map(sz => `
                              <tr>
                                <td>${sz.size_label}</td>
                                <td>${sz.pieces}</td>
                              </tr>`).join('')
                          : `<tr><td colspan="2">No sizes found.</td></tr>`
                      }
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          `;
          existingContainer.appendChild(card);
        });

        existingOffset += entries.length;
      } catch (err) {
        console.error('Error loading more data:', err);
      } finally {
        loading = false;
      }
    }

    // IntersectionObserver for lazy loading
    const observer = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) {
        loadMoreData();
      }
    }, {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    });
    observer.observe(sentinel);

    // Reset and reload on search
    searchInput.addEventListener('input', () => {
      existingOffset = 0;
      hasMore = true;
      existingContainer.innerHTML = '';
      loadMoreData();
    });

    // Load initial chunk of data
    loadMoreData();

    /*****************************************************
     * UPDATE MODAL
     *****************************************************/
    const updateModal = document.getElementById('updateModal');
    const updateForm = document.getElementById('updateForm');
    const updateSizesTable = document.getElementById('updateSizesTable');
    if (updateModal) {
      updateModal.addEventListener('show.bs.modal', async (event) => {
        const button = event.relatedTarget;
        const entryId = button.getAttribute('data-entry-id');

        updateForm.action = '/stitchingdashboard/update/' + entryId;
        document.getElementById('updatingEntryId').textContent = entryId;

        // Clear old data
        updateSizesTable.querySelector('tbody').innerHTML = '';

        try {
          const res = await fetch(`/stitchingdashboard/update/${entryId}/json`);
          if (!res.ok) {
            console.error('Error fetching existing sizes. Status:', res.status);
            return;
          }
          const data = await res.json();
          if (!data.sizes) return;

          data.sizes.forEach(sz => {
            const tr = document.createElement('tr');

            const tdLabel = document.createElement('td');
            tdLabel.textContent = sz.size_label;
            tr.appendChild(tdLabel);

            const tdUsed = document.createElement('td');
            tdUsed.textContent = sz.pieces;
            tr.appendChild(tdUsed);

            const tdRemain = document.createElement('td');
            tdRemain.textContent = (sz.remain != null) ? sz.remain : 99999;
            tr.appendChild(tdRemain);

            const tdInput = document.createElement('td');
            const inp = document.createElement('input');
            inp.type = 'number';
            inp.min = '0';
            inp.value = '';
            inp.classList.add('form-control');
            inp.dataset.sizeLabel = sz.size_label;
            tdInput.appendChild(inp);
            tr.appendChild(tdInput);

            updateSizesTable.querySelector('tbody').appendChild(tr);
          });
        } catch (err) {
          console.error(err);
        }
      });

      // On submit, treat blank fields as 0
      updateForm.addEventListener('submit', (e) => {
        const oldFields = document.querySelectorAll('.updateSizeMappingField');
        oldFields.forEach(f => f.remove());

        const rows = updateSizesTable.querySelectorAll('tbody tr');
        for (const row of rows) {
          const lbl = row.children[0].textContent;
          const remain = parseInt(row.children[2].textContent, 10);
          const input = row.children[3].querySelector('input');
          let val = parseInt(input.value.trim() === '' ? '0' : input.value, 10);
          if (isNaN(val) || val < 0) {
            val = 0;
          }
          if (val > remain) {
            alert(`Cannot add ${val} to size [${lbl}]. Max remain is ${remain}.`);
            e.preventDefault();
            return;
          }
          if (val > 0) {
            const hidden = document.createElement('input');
            hidden.type = 'hidden';
            hidden.classList.add('updateSizeMappingField');
            hidden.name = `updateSizes[${lbl}]`;
            hidden.value = val;
            updateForm.appendChild(hidden);
          }
        }
      });
    }
  </script>
</body>
</html>
