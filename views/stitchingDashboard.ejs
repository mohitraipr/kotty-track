<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>KOTTY - <span data-i18n="stitchingDashboard">Stitching Dashboard</span></title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS -->
  <link 
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" 
    rel="stylesheet"
  />

  <!-- Font Awesome (for icons) -->
  <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <style>
    body {
      background-color: #f8f9fa;
    }
    .card {
      border-radius: 8px;
    }
    .card-header-custom {
      background: #f8f9fa;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #ddd;
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
    }
    .alert {
      margin-top: 1rem;
    }
    .other-size-input {
      display: none;
    }
    .btn:hover {
      opacity: 0.9;
    }
    .nav-tabs .nav-link.active {
      font-weight: 600;
    }
    .accordion-button {
      border-radius: 0 !important;
    }
    .accordion-button:not(.collapsed) {
      box-shadow: inset 0 -1px 0 rgba(0,0,0,.125);
    }

    /* Autocomplete Styles */
    .autocomplete {
      position: relative;
      width: 100%;
    }
    .autocomplete input {
      width: 100%;
      padding: 0.375rem 0.75rem;
      border: 1px solid #ced4da;
      border-radius: 0.25rem;
      box-sizing: border-box;
    }
    .autocomplete-items {
      position: absolute;
      border: 1px solid #ced4da;
      border-top: none;
      z-index: 1000;
      top: 100%;
      left: 0;
      right: 0;
      max-height: 200px;
      overflow-y: auto;
      background-color: #fff;
      animation: fadeIn 0.2s ease-in-out;
      display: none; /* Hidden by default */
    }
    .autocomplete-items li {
      padding: 0.375rem 0.75rem;
      cursor: pointer;
    }
    .autocomplete-items li:hover, .autocomplete-active {
      background-color: #e9ecef;
    }
    .highlight {
      font-weight: bold;
      background-color: yellow;
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .language-toggle {
      margin-right: 1rem;
      color: #fff;
    }
    .language-toggle input {
      margin-left: 5px;
      margin-right: 2px;
    }
  </style>
</head>
<body>

  <!-- NAVBAR -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <i class="fas fa-tshirt"></i> <span data-i18n="kotty">KOTTY</span>
      </a>
      <button 
        class="navbar-toggler" 
        type="button" 
        data-bs-toggle="collapse" 
        data-bs-target="#navbarContent" 
        aria-controls="navbarContent" 
        aria-expanded="false" 
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarContent">
        <!-- Language Toggle (Radio Buttons) -->
        <div class="ms-auto d-flex align-items-center">
          <div class="language-toggle">
            <span data-i18n="selectLanguage">Select Language:</span>
            <label>
              <input type="radio" name="language" value="en" checked />
              EN
            </label>
            <label>
              <input type="radio" name="language" value="hi" />
              HI
            </label>
          </div>
          <ul class="navbar-nav">
            <li class="nav-item">
              <a class="nav-link" href="/logout">
                <i class="fas fa-sign-out-alt"></i> <span data-i18n="logout">Logout</span>
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </nav>

  <!-- MAIN CONTENT CONTAINER -->
  <div class="container my-4">
    <!-- FLASH MESSAGES -->
    <% if (typeof error !== 'undefined' && error.length > 0) { %>
      <div class="alert alert-danger">
        <%= error %>
      </div>
    <% } %>
    <% if (typeof success !== 'undefined' && success.length > 0) { %>
      <div class="alert alert-success">
        <%= success %>
      </div>
    <% } %>

    <!-- TABBED LAYOUT -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button 
          class="nav-link active" 
          id="create-tab" 
          data-bs-toggle="tab" 
          data-bs-target="#createTabContent" 
          type="button" 
          role="tab" 
          aria-controls="createTabContent" 
          aria-selected="true"
        >
          <i class="fas fa-plus-circle"></i> <span data-i18n="createEntry">Create Entry</span>
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button 
          class="nav-link" 
          id="existing-tab" 
          data-bs-toggle="tab" 
          data-bs-target="#existingTabContent" 
          type="button" 
          role="tab" 
          aria-controls="existingTabContent" 
          aria-selected="false"
        >
          <i class="fas fa-list"></i> <span data-i18n="existingEntries">Existing Entries</span>
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3" id="dashboardTabsContent">

      <!-- CREATE NEW ENTRY TAB -->
      <div 
        class="tab-pane fade show active" 
        id="createTabContent" 
        role="tabpanel" 
        aria-labelledby="create-tab"
      >
        <div class="card">
          <div class="card-header">
            <h4 class="mb-0">
              <i class="fas fa-plus-circle"></i> <span data-i18n="createNewStitchingEntry">Create New Stitching Entry</span>
            </h4>
          </div>
          <div class="card-body">
            <!-- CREATE FORM -->
            <form
              id="createForm"
              action="/stitchingdashboard/create"
              method="POST"
              enctype="multipart/form-data"
            >
              <div class="row mb-3">
                <!-- Replace "Select Lot" with an autocomplete style -->
                <div class="col-md-4 mb-3 mb-md-0">
                  <label for="selectedLotIdSearch" class="form-label fw-semibold" data-i18n="selectLotLabel">
                    Select Lot
                  </label>
                  <div class="autocomplete">
                    <!-- Visible input for searching -->
                    <input
                      type="text"
                      id="selectedLotIdSearch"
                      class="form-control"
                      placeholder="Search Lot by SKU or number..."
                      aria-autocomplete="list"
                      aria-controls="lotOptions"
                      aria-expanded="false"
                      aria-haspopup="listbox"
                      required
                    />
                    <!-- Hidden input to store the actual selectedLotId value -->
                    <input
                      type="hidden"
                      name="selectedLotId"
                      id="selectedLotId"
                      required
                    />
                    <!-- Autocomplete dropdown container -->
                    <ul class="autocomplete-items list-group d-none" id="lotOptions" role="listbox"></ul>
                  </div>
                </div>

                <div class="col-md-4 mb-3 mb-md-0">
                  <label for="remark" class="form-label fw-semibold" data-i18n="remarkOptional">Remark (optional)</label>
                  <input
                    type="text"
                    class="form-control"
                    name="remark"
                    id="remark"
                    placeholder="Any remarks..."
                  />
                </div>
                <div class="col-md-4">
                  <label for="image_file" class="form-label fw-semibold" data-i18n="imageOptional">Image (optional)</label>
                  <input
                    type="file"
                    class="form-control"
                    name="image_file"
                    id="image_file"
                    accept="image/*"
                  />
                </div>
              </div>

              <!-- SIZES SECTION -->
              <div id="sizeContainer">
                <div class="row mb-3">
                  <div class="col-md-6 mb-3 mb-md-0">
                    <label class="form-label fw-semibold" data-i18n="sizeLabel">Size</label>
                    <select 
                      name="sizeLabels" 
                      class="form-select size-label-select"
                      onchange="toggleOtherInput(this)"
                    >
                      <option value="S">S</option>
                      <option value="M">M</option>
                      <option value="L">L</option>
                      <option value="XL">XL</option>
                      <option value="XXL">XXL</option>
                      <option value="Other">Other</option>
                    </select>
                    <input
                      type="text"
                      name="customSizeLabels"
                      class="form-control mt-2 other-size-input"
                      placeholder="Enter custom size"
                    />
                  </div>
                  <div class="col-md-4 mb-3 mb-md-0">
                    <label class="form-label fw-semibold" data-i18n="piecesLabel">Pieces</label>
                    <input
                      type="number"
                      name="pieceCounts"
                      min="0"
                      class="form-control"
                      required
                      placeholder="e.g. 10"
                    />
                  </div>
                  <div class="col-md-2 d-flex align-items-end">
                    <button
                      type="button"
                      class="btn btn-outline-secondary w-100"
                      onclick="addSizeRow()"
                    >
                      + <span data-i18n="addMore">Add More</span>
                    </button>
                  </div>
                </div>
              </div>

              <button 
                type="submit"
                class="btn btn-primary"
              >
                <i class="fas fa-check"></i> <span data-i18n="createStitchingEntryBtn">Create Stitching Entry</span>
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING ENTRIES TAB -->
      <div 
        class="tab-pane fade" 
        id="existingTabContent" 
        role="tabpanel" 
        aria-labelledby="existing-tab"
      >
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="mb-0"><i class="fas fa-list"></i> <span data-i18n="existingEntriesTitle">Existing Entries</span></h4>
          <a href="/stitchingdashboard/download-all" class="btn btn-success">
            <i class="fas fa-file-excel"></i> <span data-i18n="downloadExcel">Download Excel</span>
          </a>
        </div>

        <!-- If there's data, display it in a Bootstrap accordion -->
        <% if (myData && myData.length > 0) { %>
          <div class="accordion" id="existingEntriesAccordion">
            <% myData.forEach((item, index) => { %>
              <div class="accordion-item">
                <h2 class="accordion-header" id="heading-<%= item.id %>">
                  <button 
                    class="accordion-button <%= index === 0 ? '' : 'collapsed' %>" 
                    type="button" 
                    data-bs-toggle="collapse" 
                    data-bs-target="#collapse-<%= item.id %>" 
                    aria-expanded="<%= index === 0 ? 'true' : 'false' %>" 
                    aria-controls="collapse-<%= item.id %>"
                  >
                    <strong data-i18n="lotLabel">Lot:</strong> <%= item.lot_no %> 
                    &nbsp; (SKU: <%= item.sku %>)
                  </button>
                </h2>
                <div 
                  id="collapse-<%= item.id %>" 
                  class="accordion-collapse collapse <%= index === 0 ? 'show' : '' %>" 
                  aria-labelledby="heading-<%= item.id %>" 
                  data-bs-parent="#existingEntriesAccordion"
                >
                  <div class="accordion-body">
                    <!-- Action Buttons (Challan / Update) -->
                    <div class="d-flex justify-content-end mb-3">
                      <a
                        href="/stitchingdashboard/challan/<%= item.id %>"
                        class="btn btn-sm btn-info me-2"
                        target="_blank"
                      >
                        <i class="fas fa-file-download"></i> <span data-i18n="challan">Challan</span>
                      </a>
                      <button
                        class="btn btn-sm btn-warning"
                        data-bs-toggle="modal"
                        data-bs-target="#updateModal"
                        data-entry-id="<%= item.id %>"
                      >
                        <i class="fas fa-edit"></i> <span data-i18n="updateBtn">Update</span>
                      </button>
                    </div>

                    <!-- Entry Details -->
                    <p class="mb-1">
                      <strong data-i18n="idLabel">ID:</strong> <%= item.id %><br />
                      <strong data-i18n="totalPiecesLabel">Total Pieces:</strong> <%= item.total_pieces %><br />
                      <strong data-i18n="remarkLabel">Remark:</strong> <%= item.remark || 'N/A' %>
                    </p>
                    
                    <!-- Image (if any) -->
                    <% if (item.image_url) { %>
                      <p class="mb-2">
                        <strong data-i18n="imageLabel">Image:</strong><br />
                        <img
                          src="<%= item.image_url %>"
                          alt="Stitch Image"
                          style="max-height: 100px;"
                          class="img-fluid"
                        />
                      </p>
                    <% } %>

                    <!-- Sizes Table -->
                    <div class="table-responsive">
                      <table class="table table-sm table-bordered" style="min-width: 200px;">
                        <thead class="table-light">
                          <tr>
                            <th data-i18n="sizeLabel">Size Label</th>
                            <th data-i18n="piecesLabel">Pieces</th>
                          </tr>
                        </thead>
                        <tbody>
                          <% if (item.sizes && item.sizes.length > 0) { %>
                            <% item.sizes.forEach((sz) => { %>
                              <tr>
                                <td><%= sz.size_label %></td>
                                <td><%= sz.pieces %></td>
                              </tr>
                            <% }) %>
                          <% } else { %>
                            <tr><td colspan="2" data-i18n="noSizesFound">No sizes found.</td></tr>
                          <% } %>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <p data-i18n="noDataFound">No stitching data found.</p>
        <% } %>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div
    class="modal fade"
    id="updateModal"
    tabindex="-1"
    aria-labelledby="updateModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm" method="POST" action="">
          <div class="modal-header">
            <h5 class="modal-title" id="updateModalLabel">
              <i class="fas fa-edit"></i> <span data-i18n="updateStitchingData">Update Stitching Data</span>
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>
              <strong data-i18n="updatingEntryIdLabel">Updating Entry ID:</strong> <span id="updatingEntryId">-</span>
            </p>

            <!-- Existing sizes (increments) -->
            <div id="existingSizesSection">
              <!-- Filled dynamically via JS -->
            </div>
            <hr />

            <!-- Add new sizes -->
            <div class="mb-2">
              <label class="form-label fw-semibold">
                <span data-i18n="addNewSizes">Add New Size(s)</span>
                <small class="fw-normal" data-i18n="otherSizeHint">(select “Other” to type custom size)</small>
              </label>
              <div id="newSizesContainer">
                <div class="row mb-2">
                  <div class="col-md-6 mb-2 mb-md-0">
                    <select 
                      name="newSizeLabels" 
                      class="form-select new-size-label" 
                      onchange="toggleOtherInput(this)"
                    >
                      <option value="">-- Select Size --</option>
                      <option value="S">S</option>
                      <option value="M">M</option>
                      <option value="L">L</option>
                      <option value="XL">XL</option>
                      <option value="XXL">XXL</option>
                      <option value="Other">Other</option>
                    </select>
                    <input
                      type="text"
                      name="customNewSizeLabels"
                      class="form-control other-size-input mt-2"
                      placeholder="Enter custom size"
                    />
                  </div>
                  <div class="col-md-4 mb-2 mb-md-0">
                    <input
                      type="number"
                      class="form-control"
                      name="newSizePieces"
                      placeholder="Pieces"
                      min="0"
                    />
                  </div>
                  <div class="col-md-2 d-flex align-items-center">
                    <button
                      type="button"
                      class="btn btn-sm btn-outline-secondary w-100"
                      onclick="addNewSizeRow()"
                    >
                      + <span data-i18n="addMore">Add More</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>

          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
              data-i18n="cancelBtn"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i> <span data-i18n="saveUpdatesBtn">Save Updates</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- ========== JS Dependencies ========== -->
  <script 
    src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js">
  </script>

  <script 
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js">
  </script>

  <!-- 4) Your Custom Script (Autocomplete + i18n toggling) -->
  <script>
    // ========== Language Data ==========
    const langData = {
      en: {
        stitchingDashboard: "Stitching Dashboard",
        kotty: "KOTTY",
        selectLanguage: "Select Language:",
        logout: "Logout",
        createEntry: "Create Entry",
        existingEntries: "Existing Entries",
        createNewStitchingEntry: "Create New Stitching Entry",
        selectLotLabel: "Select Lot",
        remarkOptional: "Remark (optional)",
        imageOptional: "Image (optional)",
        sizeLabel: "Size",
        piecesLabel: "Pieces",
        addMore: "Add More",
        createStitchingEntryBtn: "Create Stitching Entry",
        existingEntriesTitle: "Existing Entries",
        downloadExcel: "Download Excel",
        lotLabel: "Lot:",
        challan: "Challan",
        updateBtn: "Update",
        idLabel: "ID:",
        totalPiecesLabel: "Total Pieces:",
        remarkLabel: "Remark:",
        imageLabel: "Image:",
        noSizesFound: "No sizes found.",
        noDataFound: "No stitching data found.",
        updateStitchingData: "Update Stitching Data",
        updatingEntryIdLabel: "Updating Entry ID:",
        addNewSizes: "Add New Size(s)",
        otherSizeHint: "(select “Other” to type custom size)",
        cancelBtn: "Cancel",
        saveUpdatesBtn: "Save Updates"
      },
      hi: {
        stitchingDashboard: "सिलाई डैशबोर्ड",
        kotty: "कोट्टी",
        selectLanguage: "भाषा चुनें:",
        logout: "लॉगआउट",
        createEntry: "नया एंट्री",
        existingEntries: "मौजूदा एंट्री",
        createNewStitchingEntry: "नई सिलाई एंट्री बनाएं",
        selectLotLabel: "लॉट चुनें",
        remarkOptional: "टिप्पणी (वैकल्पिक)",
        imageOptional: "छवि (वैकल्पिक)",
        sizeLabel: "साइज़",
        piecesLabel: "पीस",
        addMore: "और जोड़ें",
        createStitchingEntryBtn: "सिलाई एंट्री बनाएं",
        existingEntriesTitle: "मौजूदा एंट्री",
        downloadExcel: "एक्सेल डाउनलोड करें",
        lotLabel: "लॉट:",
        challan: "चालान",
        updateBtn: "अपडेट करें",
        idLabel: "आईडी:",
        totalPiecesLabel: "कुल पीस:",
        remarkLabel: "टिप्पणी:",
        imageLabel: "छवि:",
        noSizesFound: "कोई साइज़ नहीं मिला।",
        noDataFound: "कोई सिलाई डेटा उपलब्ध नहीं है।",
        updateStitchingData: "सिलाई डेटा अपडेट करें",
        updatingEntryIdLabel: "अपडेटिंग एंट्री आईडी:",
        addNewSizes: "नया साइज़ जोड़ें",
        otherSizeHint: "(“Other” चुनें और साइज़ लिखें)",
        cancelBtn: "रद्द करें",
        saveUpdatesBtn: "सेव"
      }
    };

    // On page load, default to English (you can persist user preference as needed).
    let currentLanguage = "en";

    function setLanguage(lang) {
      currentLanguage = lang;
      // Change <title> if needed
      document.documentElement.lang = lang;

      // For each data-i18n element, update textContent
      const elements = document.querySelectorAll("[data-i18n]");
      elements.forEach(el => {
        const key = el.getAttribute("data-i18n");
        el.textContent = langData[lang][key] || el.textContent;
      });
    }

    // ========== Add event listeners to radio buttons ==========
    document.addEventListener('DOMContentLoaded', () => {
      const langRadios = document.querySelectorAll('input[name="language"]');
      langRadios.forEach(radio => {
        radio.addEventListener('change', () => {
          setLanguage(radio.value);
        });
      });

      // Initialize with English or whichever default you want
      setLanguage("en");
    });


    // ========== LOTS AUTOCOMPLETE ==========
    const existingLots = <%- JSON.stringify(lots) %> || [];
    const selectedLotIdSearch = document.getElementById('selectedLotIdSearch');
    const selectedLotId = document.getElementById('selectedLotId');
    const lotOptions = document.getElementById('lotOptions');

    const lotAutocompleteData = existingLots.map(lot => ({
      displayText: `${lot.lot_no} (SKU: ${lot.sku})`,
      value: lot.id
    }));

    function debounce(func, delay) {
      let debounceTimer;
      return function(...args) {
        const context = this;
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(context, args), delay);
      };
    }

    function initializeAutocomplete() {
      populateOptions();

      selectedLotIdSearch.addEventListener('focus', () => {
        if (selectedLotIdSearch.value.trim() !== '') {
          lotOptions.classList.remove('d-none');
          lotOptions.classList.add('d-block');
          selectedLotIdSearch.setAttribute('aria-expanded', 'true');
        }
      });

      document.addEventListener('click', (e) => {
        if (!selectedLotIdSearch.contains(e.target) && !lotOptions.contains(e.target)) {
          lotOptions.classList.remove('d-block');
          lotOptions.classList.add('d-none');
          selectedLotIdSearch.setAttribute('aria-expanded', 'false');
        }
      });

      selectedLotIdSearch.addEventListener('input', debounce(() => {
        const filter = selectedLotIdSearch.value.toLowerCase();
        const options = lotOptions.querySelectorAll('li.list-group-item:not(.no-results)');
        let visibleCount = 0;
        options.forEach(option => {
          const text = option.textContent.toLowerCase();
          if (text.includes(filter)) {
            option.style.display = 'block';
            const regex = new RegExp(`(${filter})`, 'gi');
            // highlight matching text
            option.innerHTML = option.textContent.replace(regex, '<span class="highlight">$1</span>');
            visibleCount++;
          } else {
            option.style.display = 'none';
            option.innerHTML = option.textContent;
          }
        });

        const noResult = lotOptions.querySelector('.no-results');
        if (visibleCount === 0) {
          if (!noResult) {
            const li = document.createElement('li');
            li.classList.add('list-group-item', 'no-results');
            li.textContent = 'No matching results.';
            lotOptions.appendChild(li);
          }
        } else {
          if (noResult) {
            noResult.remove();
          }
        }

        if (selectedLotIdSearch.value.trim() !== '') {
          lotOptions.classList.remove('d-none');
          lotOptions.classList.add('d-block');
          selectedLotIdSearch.setAttribute('aria-expanded', 'true');
        } else {
          lotOptions.classList.remove('d-block');
          lotOptions.classList.add('d-none');
          selectedLotIdSearch.setAttribute('aria-expanded', 'false');
        }
      }, 300));

      lotOptions.addEventListener('click', (e) => {
        if (e.target && e.target.matches('li.list-group-item') && !e.target.classList.contains('no-results')) {
          const chosenVal = e.target.dataset.value;
          selectedLotId.value = chosenVal;
          selectedLotIdSearch.value = e.target.textContent;
          lotOptions.classList.remove('d-block');
          lotOptions.classList.add('d-none');
          selectedLotIdSearch.setAttribute('aria-expanded', 'false');
        }
      });

      let currentFocus = -1;
      selectedLotIdSearch.addEventListener('keydown', function(e) {
        const items = lotOptions.querySelectorAll('li.list-group-item:not(.no-results)');
        if (e.key === 'ArrowDown') {
          currentFocus++;
          addActive(items);
          e.preventDefault();
        } else if (e.key === 'ArrowUp') {
          currentFocus--;
          addActive(items);
          e.preventDefault();
        } else if (e.key === 'Enter') {
          e.preventDefault();
          if (currentFocus > -1 && items[currentFocus]) {
            items[currentFocus].click();
          }
        }
      });

      function addActive(items) {
        if (!items) return false;
        removeActive(items);
        if (currentFocus >= items.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = items.length - 1;
        items[currentFocus].classList.add('active');
        items[currentFocus].setAttribute('aria-selected', 'true');
      }
      function removeActive(items) {
        items.forEach(item => {
          item.classList.remove('active');
          item.setAttribute('aria-selected', 'false');
        });
      }

      function populateOptions() {
        lotOptions.innerHTML = '';
        lotAutocompleteData.forEach(lot => {
          const li = document.createElement('li');
          li.classList.add('list-group-item', 'list-group-item-action');
          li.setAttribute('role', 'option');
          li.setAttribute('aria-selected', 'false');
          li.textContent = lot.displayText;
          li.dataset.value = lot.value;
          lotOptions.appendChild(li);
        });
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      initializeAutocomplete();
    });

    // ========== TOGGLE "OTHER" CUSTOM SIZE ==========
    function toggleOtherInput(selectElem) {
      const row = selectElem.closest('.row') || selectElem.closest('.col-md-6');
      if (!row) return;
      const otherInput = row.querySelector('.other-size-input');
      if (!otherInput) return;
      otherInput.style.display = (selectElem.value === 'Other') ? 'block' : 'none';
    }

    // ========== ADD/REMOVE SIZE ROWS IN CREATE FORM ==========
    function addSizeRow() {
      const container = document.getElementById('sizeContainer');
      const rowHtml = `
        <div class="row mb-3">
          <div class="col-md-6 mb-3 mb-md-0">
            <label class="form-label fw-semibold d-md-none" data-i18n="sizeLabel">Size</label>
            <select name="sizeLabels" class="form-select size-label-select" onchange="toggleOtherInput(this)">
              <option value="S">S</option>
              <option value="M">M</option>
              <option value="L">L</option>
              <option value="XL">XL</option>
              <option value="XXL">XXL</option>
              <option value="Other">Other</option>
            </select>
            <input
              type="text"
              name="customSizeLabels"
              class="form-control mt-2 other-size-input"
              placeholder="Enter custom size"
            />
          </div>
          <div class="col-md-4 mb-3 mb-md-0">
            <label class="form-label fw-semibold d-md-none" data-i18n="piecesLabel">Pieces</label>
            <input
              type="number"
              name="pieceCounts"
              min="0"
              class="form-control"
              required
              placeholder="e.g. 10"
            />
          </div>
          <div class="col-md-2 d-flex align-items-end">
            <button 
              type="button" 
              class="btn btn-outline-danger w-100" 
              onclick="removeRow(this)"
            >
              - <span data-i18n="removeBtn">Remove</span>
            </button>
          </div>
        </div>
      `;
      const temp = document.createElement('div');
      temp.innerHTML = rowHtml;
      container.appendChild(temp.firstElementChild);
    }

    function removeRow(btn) {
      btn.closest('.row').remove();
    }

    // ========== UPDATE MODAL LOGIC ==========
    const updateModal = document.getElementById('updateModal');
    updateModal.addEventListener('show.bs.modal', function (event) {
      const button = event.relatedTarget; 
      const entryId = button.getAttribute('data-entry-id');
      // Set form action
      const updateForm = document.getElementById('updateForm');
      updateForm.action = '/stitchingdashboard/update/' + entryId;
      document.getElementById('updatingEntryId').textContent = entryId;

      // Clear existing fields
      document.getElementById('existingSizesSection').innerHTML = '';

      // Fetch existing sizes
      fetch('/stitchingdashboard/update/' + entryId + '/json')
        .then((res) => res.json())
        .then((data) => {
          if (!data.sizes) return;
          data.sizes.forEach((sz) => {
            const html = `
              <div class="row mb-2">
                <div class="col-md-6 mb-2 mb-md-0">
                  <label class="form-label fw-bold d-block">
                    ${sz.size_label} (current: ${sz.pieces})
                  </label>
                  <input 
                    type="hidden" 
                    name="existingSizeLabels" 
                    value="${sz.size_label}"
                  />
                </div>
                <div class="col-md-6">
                  <input
                    type="number"
                    class="form-control"
                    name="existingIncrements"
                    min="0"
                    placeholder="Increment pieces by 0 or more"
                  />
                </div>
              </div>
            `;
            document.getElementById('existingSizesSection')
              .insertAdjacentHTML('beforeend', html);
          });
        })
        .catch((err) => {
          console.error('Error fetching existing sizes:', err);
        });
    });

    // ========== ADD NEW SIZE ROW IN UPDATE MODAL ==========
    function addNewSizeRow() {
      const container = document.getElementById('newSizesContainer');
      const rowHtml = `
        <div class="row mb-2">
          <div class="col-md-6 mb-2 mb-md-0">
            <select name="newSizeLabels" class="form-select new-size-label" onchange="toggleOtherInput(this)">
              <option value="">-- Select Size --</option>
              <option value="S">S</option>
              <option value="M">M</option>
              <option value="L">L</option>
              <option value="XL">XL</option>
              <option value="XXL">XXL</option>
              <option value="Other">Other</option>
            </select>
            <input
              type="text"
              name="customNewSizeLabels"
              class="form-control other-size-input mt-2"
              placeholder="Enter custom size"
            />
          </div>
          <div class="col-md-4 mb-2 mb-md-0">
            <input
              type="number"
              class="form-control"
              name="newSizePieces"
              placeholder="Pieces"
              min="0"
            />
          </div>
          <div class="col-md-2 d-flex align-items-center">
            <button 
              type="button" 
              class="btn btn-sm btn-outline-danger w-100" 
              onclick="this.closest('.row').remove()"
            >
              - <span data-i18n="removeBtn">Remove</span>
            </button>
          </div>
        </div>
      `;
      const temp = document.createElement('div');
      temp.innerHTML = rowHtml;
      container.appendChild(temp.firstElementChild);
    }
  </script>
</body>
</html>
