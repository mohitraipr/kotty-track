<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Jeans Assembly Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap 5 & FontAwesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"/>

  <!-- jQuery (must load BEFORE Select2 JS) -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

  <!-- Select2 4.1 -->
  <link  href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet"/>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <style>
    body       { background-color:#f8f9fa; }
    .navbar    { box-shadow:0 2px 4px rgba(0,0,0,.1); }
    .nav-tabs .nav-link { font-weight:500; }

    /* Make Select2 look like Bootstrap form-select */
    .select2-container .select2-selection--single{
      height:calc(2.5rem + 2px);
      padding:.5rem .75rem;
      border:1px solid #ced4da;
      border-radius:.375rem;
    }
    .select2-container--default .select2-selection--single .select2-selection__arrow{
      height:2.5rem;
      right:.75rem;
    }

    /* Hide legacy autocomplete remnants */
    .autocomplete-items{display:none!important;}
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="#"><i class="fas fa-people-carry"></i> Jeans Assembly Dashboard</a>
      <div class="ms-auto">
        <a href="/jeansassemblydashboard/approve" class="btn btn-outline-info btn-sm me-2"><i class="fas fa-check-circle"></i> Approvals</a>
        <a href="/challandashboard"           class="btn btn-outline-info btn-sm me-2"><i class="fas fa-file-signature"></i> Challan</a>
        <a href="/logout"                     class="btn btn-outline-danger btn-sm"><i class="fas fa-sign-out-alt"></i> Logout</a>
      </div>
    </div>
  </nav>

  <div class="container my-4">
    <%- include('partials/flashMessages') %>

    <!-- Tabs -->
    <ul class="nav nav-tabs" role="tablist">
      <li class="nav-item">
        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#createTab" type="button" role="tab">
          <i class="fas fa-plus-circle me-1"></i> Create Entry
        </button>
      </li>
      <li class="nav-item">
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#existingTab" type="button" role="tab">
          <i class="fas fa-list me-1"></i> Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3">
      <!-- CREATE ENTRY TAB -->
      <div class="tab-pane fade show active" id="createTab" role="tabpanel">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white"><i class="fas fa-plus-circle"></i> Create New Jeans Assembly Entry</div>
          <div class="card-body">
            <form id="createForm" enctype="multipart/form-data">
              <!-- Lot dropdown (searchable) -->
              <div class="mb-3">
                <label for="selectedLotId" class="form-label">Select Lot</label>
                <select id="selectedLotId" name="selectedLotId" class="form-select" required>
                  <option value="">-- Choose a Lot --</option>
                  <% lots.forEach(l => { %>
                    <option value="<%= l.id %>">Lot <%= l.lot_no %> (SKU: <%= l.sku %>)</option>
                  <% }); %>
                </select>
              </div>

              <div class="mb-3">
                <label class="form-label">Remark (optional)</label>
                <input type="text" name="remark" class="form-control" placeholder="Enter remark…"/>
              </div>

              <div class="mb-3">
                <label class="form-label">Image (optional)</label>
                <input type="file" name="image_file" accept="image/*" class="form-control"/>
              </div>

              <div class="mb-3">
                <label class="form-label">Assign to Washer</label>
                <select name="washer_id" class="form-select">
                  <option value="">-- Do not assign to washing --</option>
                  <% washers.forEach(w => { %>
                    <option value="<%= w.id %>"><%= w.username %></option>
                  <% }); %>
                </select>
                <p class="small text-muted mb-0">If selected, all created pieces will be assigned automatically.</p>
              </div>

              <div id="lotSizesContainer" style="display:none;">
                <h5 class="mt-4">Sizes for This Lot</h5>
                <table class="table table-bordered" id="sizesTable">
                  <thead class="table-light"><tr><th>Size Label</th><th>Max Available</th><th>Enter Pieces</th></tr></thead>
                  <tbody></tbody>
                </table>
                <div class="mt-2"><strong>Total Pieces Selected:</strong> <span id="createTotalPieces">0</span></div>
              </div>

              <button class="btn btn-success mt-3" type="submit"><i class="fas fa-check me-1"></i> Create Jeans Assembly Entry</button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING TAB -->
      <div class="tab-pane fade" id="existingTab" role="tabpanel">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4><i class="fas fa-list"></i> Existing Jeans Assembly Entries</h4>
          <a href="/jeansassemblydashboard/download-all" class="btn btn-success"><i class="fas fa-file-excel me-1"></i> Download Excel</a>
        </div>

        <div class="input-group mb-3">
          <span class="input-group-text"><i class="fas fa-search"></i></span>
          <input id="searchExisting" type="text" class="form-control" placeholder="Search by lot or SKU…"/>
        </div>

        <div id="existingEntriesContainer" class="accordion"></div>
        <div id="loadMoreSentinel" style="height:60px;"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div class="modal fade" id="updateModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm">
          <div class="modal-header">
            <h5 class="modal-title"><i class="fas fa-edit"></i> Update Jeans Assembly Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p><strong>Updating Entry ID:</strong> <span id="updatingEntryId"></span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead class="table-light"><tr><th>Size Label</th><th>Already Used</th><th>Max Remain</th><th>New Pieces (Increment)</th></tr></thead>
              <tbody></tbody>
            </table>
            <p class="small text-muted">Leave blank or zero for no increment.</p>
          </div>
          <div class="modal-footer">
            <button class="btn btn-secondary" type="button" data-bs-dismiss="modal"><i class="fas fa-times"></i> Cancel</button>
            <button class="btn btn-primary"   type="submit"><i class="fas fa-save"></i> Save Updates</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    /************ 1. Activate Select2 for the Lot dropdown ************/
    $(function(){
      $('#selectedLotId').select2({
        placeholder:'-- Choose a Lot --',
        allowClear:true,
        width:'100%',
        minimumResultsForSearch:0
      });
    });

    /************ 2. Size fetch & total calculation (unchanged) ************/
    const lotSel          = document.getElementById('selectedLotId');
    const sizeBox         = document.getElementById('lotSizesContainer');
    const sizeTBody       = document.querySelector('#sizesTable tbody');
    const totalSpan       = document.getElementById('createTotalPieces');

    lotSel.addEventListener('change', async () => {
      const id = lotSel.value;
      if (!id){ sizeTBody.innerHTML=''; sizeBox.style.display='none'; return; }
      try{
        const r = await fetch(`/jeansassemblydashboard/get-lot-sizes/${id}`);
        if(!r.ok) throw new Error(r.status);
        renderSizes(await r.json());
      }catch(e){
        console.error('Error fetching lot sizes',e);
        sizeTBody.innerHTML=''; sizeBox.style.display='none';
      }
    });

    function renderSizes(arr){
      sizeTBody.innerHTML='';
      arr.forEach(sz=>{
        sizeTBody.insertAdjacentHTML('beforeend',`
          <tr>
            <td>${sz.size_label}</td>
            <td>${sz.remain}</td>
            <td><input type="number" class="form-control" min="1" max="${sz.remain}"
                       value="${sz.remain}" data-size-id="${sz.id}"></td>
          </tr>`);
      });
      sizeBox.style.display='block';
      updateTotal();
    }

    function updateTotal(){
      let sum=0;
      sizeTBody.querySelectorAll('input').forEach(i=>{
        const v=parseInt(i.value,10); if(!isNaN(v)&&v>0) sum+=v;
      });
      totalSpan.textContent=sum;
    }
    sizeTBody.addEventListener('input', updateTotal);

    /************ 3. Create form submission (original) ************/
    document.getElementById('createForm').addEventListener('submit', async e=>{
      e.preventDefault();
      const fd = new FormData(e.target);
      sizeTBody.querySelectorAll('input').forEach(inp=>{
        const v=parseInt(inp.value,10);
        if(v>0) fd.append(`sizes[${inp.dataset.sizeId}]`,v);
      });
      try{
        const r = await fetch('/jeansassemblydashboard/create',{method:'POST',body:fd});
        if(r.redirected) return location.href=r.url;
        const j = await r.json().catch(()=>({}));
        if(j.error) alert(j.error); else location.reload();
      }catch(err){ console.error('Create error',err); alert('Error creating entry'); }
    });

    /************ 4. Lazy-load existing entries (original) ************/
    let off=0, load=false, more=true;
    const listBox  = document.getElementById('existingEntriesContainer');
    const sentinel = document.getElementById('loadMoreSentinel');
    const search   = document.getElementById('searchExisting');

    async function loadMore(){
      if(load||!more) return;
      load=true;
      try{
        const r=await fetch(`/jeansassemblydashboard/list-entries?offset=${off}&search=${encodeURIComponent(search.value.trim())}`);
        if(!r.ok) throw new Error(r.status);
        const d=await r.json(); more=d.hasMore;
        d.data.forEach(addCard); off+=d.data.length;
      }catch(e){ console.error('Load list error',e);} load=false;
    }

    function addCard(item){
      const h=`h-${item.id}`, c=`c-${item.id}`;
      listBox.insertAdjacentHTML('beforeend',`
        <div class="accordion-item">
          <h2 class="accordion-header" id="${h}">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#${c}" aria-expanded="false">
              <i class="fas fa-box-open me-1"></i>
              Lot ${item.lot_no} (SKU: ${item.sku}) - Total: ${item.total_pieces}
            </button>
          </h2>
          <div id="${c}" class="accordion-collapse collapse" aria-labelledby="${h}" data-bs-parent="#existingEntriesContainer">
            <div class="accordion-body">
              <div class="d-flex justify-content-end mb-3">
                <a class="btn btn-sm btn-info me-2" target="_blank" href="/jeansassemblydashboard/challan/${item.id}">
                  <i class="fas fa-file-alt"></i> Challan
                </a>
                <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#updateModal" data-entry-id="${item.id}">
                  <i class="fas fa-edit"></i> Update
                </button>
              </div>
              <p><strong>ID:</strong> ${item.id}</p>
              <p><strong>Remark:</strong> ${item.remark||'N/A'}</p>
              ${item.image_url ? `<p><img src="${item.image_url}" style="max-width:200px;"></p>` : ''}
              <table class="table table-sm">
                <thead><tr><th>Size Label</th><th>Pieces</th></tr></thead>
                <tbody>
                  ${item.sizes?.length ? item.sizes.map(sz=>`<tr><td>${sz.size_label}</td><td>${sz.pieces}</td></tr>`).join('') :
                                         '<tr><td colspan="2">No sizes found</td></tr>'}
                </tbody>
              </table>
            </div>
          </div>
        </div>`);
    }

    new IntersectionObserver(e=>{ if(e[0].isIntersecting) loadMore(); },{threshold:.1}).observe(sentinel);
    search.addEventListener('input',()=>{ off=0;more=true;listBox.innerHTML='';loadMore(); });
    loadMore();

    /************ 5. Update modal logic (original) ************/
    const updModal=document.getElementById('updateModal');
    const updForm =document.getElementById('updateForm');
    const updBody =document.querySelector('#updateSizesTable tbody');
    const updIdEl =document.getElementById('updatingEntryId');

    updModal.addEventListener('show.bs.modal',async ev=>{
      const id=ev.relatedTarget.getAttribute('data-entry-id');
      updIdEl.textContent=id;
      updForm.action=`/jeansassemblydashboard/update/${id}`;
      updBody.innerHTML='';
      try{
        const r=await fetch(`/jeansassemblydashboard/update/${id}/json`);
        if(!r.ok) throw new Error(r.status);
        const d=await r.json();
        d.sizes.forEach(sz=>{
          updBody.insertAdjacentHTML('beforeend',`
            <tr>
              <td>${sz.size_label}</td>
              <td>${sz.pieces}</td>
              <td>${sz.remain??999999}</td>
              <td><input type="number" class="form-control" min="0" placeholder="0" data-size-label="${sz.size_label}"></td>
            </tr>`);
        });
      }catch(e){console.error('Update size fetch error',e);}
    });

    updForm.addEventListener('submit',async e=>{
      e.preventDefault();
      document.querySelectorAll('.updateSizeMappingField').forEach(el=>el.remove());
      updBody.querySelectorAll('tr').forEach(row=>{
        const label=row.children[0].textContent;
        const rem=parseInt(row.children[2].textContent,10);
        const val=parseInt(row.children[3].querySelector('input').value||'0',10);
        if(val>rem){alert(`Cannot add ${val} to ${label}. Only ${rem} remain.`); throw 'abort';}
        if(val>0){
          const h=document.createElement('input');
          h.type='hidden'; h.className='updateSizeMappingField';
          h.name=`updateSizes[${label}]`; h.value=val;
          updForm.appendChild(h);
        }
      });
      try{
        const r=await fetch(updForm.action,{method:'POST',body:new FormData(updForm)});
        if(r.redirected) location.href=r.url;
      }catch(err){console.error('Update error',err);}
    });
  </script>
</body>
</html>
