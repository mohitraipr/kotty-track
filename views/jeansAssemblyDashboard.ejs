<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Jeans Assembly Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Bootstrap 5 & FontAwesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">

  <!-- jQuery (MUST load before Select2) -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

  <!-- Select2 4.1.0-rc.0 (stable) -->
  <link  href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

  <style>
    body { background:#f8f9fa; }
    .navbar { box-shadow:0 2px 4px rgba(0,0,0,.1); }
    .nav-tabs .nav-link { font-weight:500; }

    /* Make Select2 look like Bootstrap form fields */
    .select2-container .select2-selection--single{
      height:calc(2.5rem + 2px);
      padding:.5rem .75rem;
      border:1px solid #ced4da;
      border-radius:.375rem;
    }
    .select2-container--default .select2-selection--single .select2-selection__arrow{
      height:2.5rem; right:.75rem;
    }

    /* Hide any legacy autocomplete artefacts */
    .autocomplete-items{display:none!important;}
  </style>
</head>
<body>
  <!-- NAVBAR -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="#"><i class="fas fa-people-carry"></i> Jeans Assembly Dashboard</a>
      <div class="ms-auto">
        <a href="/jeansassemblydashboard/approve" class="btn btn-outline-info btn-sm me-2">
          <i class="fas fa-check-circle"></i> Approvals
        </a>
        <a href="/challandashboard" class="btn btn-outline-info btn-sm me-2">
          <i class="fas fa-file-signature"></i> Challan
        </a>
        <a href="/logout" class="btn btn-outline-danger btn-sm">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </div>
    </div>
  </nav>

  <div class="container my-4">
    <%- include('partials/flashMessages') %>

    <!-- TABS -->
    <ul class="nav nav-tabs">
      <li class="nav-item">
        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#createTab" type="button">
          <i class="fas fa-plus-circle me-1"></i> Create Entry
        </button>
      </li>
      <li class="nav-item">
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#existingTab" type="button">
          <i class="fas fa-list me-1"></i> Existing Entries
        </button>
      </li>
    </ul>

    <div class="tab-content mt-3">
      <!-- CREATE TAB -->
      <div class="tab-pane fade show active" id="createTab">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">
            <i class="fas fa-plus-circle"></i> Create New Jeans Assembly Entry
          </div>
          <div class="card-body">
            <form id="createForm" enctype="multipart/form-data">
              <!-- LOT selector -->
              <div class="mb-3">
                <label class="form-label" for="selectedLotId">Select Lot</label>
                <select id="selectedLotId" name="selectedLotId" class="form-select" required>
                  <option value="">-- Choose a Lot --</option>
                  <% lots.forEach(l => { %>
                    <option value="<%= l.id %>">Lot <%= l.lot_no %> (SKU: <%= l.sku %>)</option>
                  <% }) %>
                </select>
              </div>

              <div class="mb-3">
                <label class="form-label">Remark (optional)</label>
                <input name="remark" type="text" class="form-control" placeholder="Enter remark…">
              </div>

              <div class="mb-3">
                <label class="form-label">Image (optional)</label>
                <input name="image_file" type="file" class="form-control" accept="image/*">
              </div>

              <div class="mb-3">
                <label class="form-label">Assign to Washer</label>
                <select name="washer_id" class="form-select">
                  <option value="">-- Do not assign to washing --</option>
                  <% washers.forEach(w=>{ %>
                    <option value="<%= w.id %>"><%= w.username %></option>
                  <% }) %>
                </select>
                <p class="small text-muted mb-0">If selected, all created pieces will be assigned automatically.</p>
              </div>

              <!-- SIZES -->
              <div id="lotSizesContainer" style="display:none;">
                <h5 class="mt-4">Sizes for This Lot</h5>
                <table class="table table-bordered" id="sizesTable">
                  <thead class="table-light"><tr><th>Size Label</th><th>Max Available</th><th>Enter Pieces</th></tr></thead>
                  <tbody></tbody>
                </table>
                <div><strong>Total Pieces:</strong> <span id="createTotalPieces">0</span></div>
              </div>

              <button type="submit" class="btn btn-success mt-3">
                <i class="fas fa-check me-1"></i> Create Jeans Assembly Entry
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- EXISTING TAB -->
      <div class="tab-pane fade" id="existingTab">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4><i class="fas fa-list"></i> Existing Jeans Assembly Entries</h4>
          <a href="/jeansassemblydashboard/download-all" class="btn btn-success">
            <i class="fas fa-file-excel me-1"></i> Download Excel
          </a>
        </div>

        <div class="input-group mb-3">
          <span class="input-group-text"><i class="fas fa-search"></i></span>
          <input id="searchExisting" type="text" class="form-control" placeholder="Search by lot or SKU…">
        </div>

        <div id="existingEntriesContainer" class="accordion"></div>
        <div id="loadMoreSentinel" style="height:60px;"></div>
      </div>
    </div>
  </div>

  <!-- UPDATE MODAL -->
  <div class="modal fade" id="updateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="updateForm">
          <div class="modal-header">
            <h5 class="modal-title"><i class="fas fa-edit"></i> Update Jeans Assembly Data</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <p><strong>Updating Entry ID:</strong> <span id="updatingEntryId"></span></p>
            <table class="table table-bordered" id="updateSizesTable">
              <thead class="table-light"><tr><th>Size Label</th><th>Already Used</th><th>Max Remain</th><th>New Pieces (Increment)</th></tr></thead>
              <tbody></tbody>
            </table>
            <p class="small text-muted">Leave blank or zero to skip a size.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-times"></i> Cancel</button>
            <button type="submit" class="btn btn-primary"><i class="fas fa-save"></i> Save Updates</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Bootstrap Bundle (with Popper) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    /* ---------- 1. Activate Select2 ---------- */
    $(function () {
      $('#selectedLotId').select2({
        placeholder: '-- Choose a Lot --',
        allowClear: true,
        width: '100%',
        minimumResultsForSearch: 0
      });
    });

    /* ---------- 2. Core JS ---------- */
    const selectedLotId     = document.getElementById('selectedLotId');
    const lotSizesContainer = document.getElementById('lotSizesContainer');
    const sizesTableBody    = document.querySelector('#sizesTable tbody');
    const createTotalPieces = document.getElementById('createTotalPieces');

    selectedLotId.addEventListener('change', async () => {
      const id = selectedLotId.value;
      if (!id){ sizesTableBody.innerHTML=''; lotSizesContainer.style.display='none'; return; }
      try{
        const r = await fetch(`/jeansassemblydashboard/get-lot-sizes/${id}`);
        if(!r.ok) throw new Error('HTTP '+r.status);
        buildSizeRows(await r.json());
      }catch(e){ console.error(e); sizesTableBody.innerHTML=''; lotSizesContainer.style.display='none'; }
    });

    function buildSizeRows(arr){
      sizesTableBody.innerHTML='';
      lotSizesContainer.style.display='block';
      arr.forEach(sz=>{
        sizesTableBody.insertAdjacentHTML('beforeend',`
          <tr>
            <td>${sz.size_label}</td>
            <td>${sz.remain}</td>
            <td><input type="number" class="form-control" min="1" max="${sz.remain}"
                       value="${sz.remain}" data-size-id="${sz.id}" required></td>
          </tr>`);
      });
      createTotalPieces.textContent='0';
    }

    sizesTableBody.addEventListener('input',()=>{
      let t=0;
      sizesTableBody.querySelectorAll('input').forEach(i=>{
        const n=parseInt(i.value,10); if(!isNaN(n)&&n>0) t+=n;
      });
      createTotalPieces.textContent=t;
    });

    /* ---------- 3. Create Form ---------- */
    document.getElementById('createForm').addEventListener('submit',async e=>{
      e.preventDefault();
      const fd = new FormData(e.target);

      sizesTableBody.querySelectorAll('input').forEach(inp=>{
        const v=parseInt(inp.value,10)||0;
        if(v>0) fd.append(`sizes[${inp.dataset.sizeId}]`, v);
      });

      try{
        const r=await fetch('/jeansassemblydashboard/create',{method:'POST',body:fd});
        if(r.redirected){ window.location=r.url; return; }
        const j=await r.json().catch(()=>({}));
        if(j.error) alert(j.error); else window.location.reload();
      }catch(err){ console.error(err); alert('Error creating entry.'); }
    });

    /* ---------- 4. Lazy-load Existing Entries ---------- */
    let offset=0, hasMore=true, loading=false;
    const container=document.getElementById('existingEntriesContainer');
    const sentinel=document.getElementById('loadMoreSentinel');
    const search=document.getElementById('searchExisting');

    async function loadMore(){
      if(loading||!hasMore) return;
      loading=true;
      try{
        const q=encodeURIComponent(search.value.trim());
        const r=await fetch(`/jeansassemblydashboard/list-entries?offset=${offset}&search=${q}`);
        if(!r.ok) throw new Error('HTTP '+r.status);
        const {data,hasMore:more}=await r.json();
        data.forEach(renderEntry); offset+=data.length; hasMore=more;
      }catch(e){ console.error(e); } finally{ loading=false; }
    }

    function renderEntry(item){
      const hid=`hdr-${item.id}`, cid=`col-${item.id}`;
      container.insertAdjacentHTML('beforeend',`
        <div class="accordion-item">
          <h2 class="accordion-header" id="${hid}">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#${cid}" aria-expanded="false">
              <i class="fas fa-box-open me-1"></i>
              Lot ${item.lot_no} (SKU: ${item.sku}) – Total: ${item.total_pieces}
            </button>
          </h2>
          <div id="${cid}" class="accordion-collapse collapse" aria-labelledby="${hid}"
               data-bs-parent="#existingEntriesContainer">
            <div class="accordion-body">
              <div class="d-flex justify-content-end mb-3">
                <a href="/jeansassemblydashboard/challan/${item.id}" target="_blank" class="btn btn-info btn-sm me-2">
                  <i class="fas fa-file-alt"></i> Challan
                </a>
                <button class="btn btn-warning btn-sm" data-bs-toggle="modal"
                        data-bs-target="#updateModal" data-entry-id="${item.id}">
                  <i class="fas fa-edit"></i> Update
                </button>
              </div>
              <p><strong>ID:</strong> ${item.id}</p>
              <p><strong>Remark:</strong> ${item.remark||'N/A'}</p>
              ${item.image_url?`<p><img src="${item.image_url}" style="max-width:200px;"></p>`:''}
              <table class="table table-sm">
                <thead><tr><th>Size Label</th><th>Pieces</th></tr></thead>
                <tbody>
                  ${item.sizes?.length
                    ? item.sizes.map(s=>`<tr><td>${s.size_label}</td><td>${s.pieces}</td></tr>`).join('')
                    : '<tr><td colspan="2">No sizes</td></tr>'}
                </tbody>
              </table>
            </div>
          </div>
        </div>`);
    }

    new IntersectionObserver(e=>{ if(e[0].isIntersecting) loadMore(); },{threshold:0.1})
      .observe(sentinel);

    search.addEventListener('input',()=>{ container.innerHTML=''; offset=0; hasMore=true; loadMore(); });
    loadMore();

    /* ---------- 5. Update Modal ---------- */
    const updateForm=document.getElementById('updateForm');
    const tbl=document.getElementById('updateSizesTable').querySelector('tbody');
    document.getElementById('updateModal').addEventListener('show.bs.modal',async ev=>{
      const id=ev.relatedTarget.getAttribute('data-entry-id');
      document.getElementById('updatingEntryId').textContent=id;
      updateForm.action=`/jeansassemblydashboard/update/${id}`;
      tbl.innerHTML='';
      try{
        const r=await fetch(`/jeansassemblydashboard/update/${id}/json`);
        if(!r.ok) throw new Error('HTTP '+r.status);
        (await r.json()).sizes.forEach(s=>{
          tbl.insertAdjacentHTML('beforeend',`
            <tr>
              <td>${s.size_label}</td><td>${s.pieces}</td><td>${s.remain??999999}</td>
              <td><input type="number" class="form-control" min="0" placeholder="0"
                         data-size-label="${s.size_label}"></td>
            </tr>`);
        });
      }catch(e){ console.error(e); }
    });

    updateForm.addEventListener('submit',async e=>{
      e.preventDefault();
      document.querySelectorAll('.updateSizeMappingField').forEach(n=>n.remove());
      for(const row of tbl.querySelectorAll('tr')){
        const label=row.children[0].textContent;
        const remain=parseInt(row.children[2].textContent,10);
        const val=parseInt(row.children[3].querySelector('input').value||'0',10);
        if(val>remain){ alert(`Cannot add ${val} (max ${remain}) to ${label}`); return; }
        if(val>0){
          const h=document.createElement('input');
          h.type='hidden'; h.name=`updateSizes[${label}]`;
          h.value=val; h.className='updateSizeMappingField';
          updateForm.appendChild(h);
        }
      }
      try{
        const r=await fetch(updateForm.action,{method:'POST',body:new FormData(updateForm)});
        if(r.redirected) window.location=r.url;
      }catch(err){ console.error(err); }
    });
  </script>
</body>
</html>
